1) Valid Sudoku - medium 
class Solution {
    public static boolean isValidSudoku(char[][] board) {
        Map<Integer, Set<Integer>> rowMap = new HashMap<>();
        Map<Integer, Set<Integer>> colMap = new HashMap<>();
        Map<Integer, Set<Integer>> subMap = new HashMap<>();

        for (int i = 0; i < 9; i++) {
            rowMap.put(i, new HashSet<>());
            colMap.put(i, new HashSet<>());
            subMap.put(i, new HashSet<>());
        }

        for (int i = 0; i < 9; i++) {
            for (int j = 0; j < 9; j++) {
                char ch = board[i][j];
                if (ch != '.') {
                    int num = ch - '0';
                    Set<Integer> rowSet = rowMap.get(i);
                    if (!rowSet.add(num)) {
                        return false;
                    }

                    Set<Integer> colSet = colMap.get(j);
                    if (!colSet.add(num)) {
                        return false;
                    }

                    int subIdx = 3 * (i / 3) + j / 3;
                    Set<Integer> subSet = subMap.get(subIdx);
                    if (!subSet.add(num)) {
                        return false;
                    }
                }
            }
        }
        return true;
    }
}

2) Queue using 2 stacks - easy 

public class Main {
    static class MyQueue {
        Stack<Integer> stack1; // For enqueue operation
        Stack<Integer> stack2; // For dequeue and printFront operations

        public MyQueue() {
            stack1 = new Stack<>();
            stack2 = new Stack<>();
        }

        public void enqueue(int x) {
            stack1.push(x);
        }

        public int dequeue() {
            if (stack2.isEmpty()) {
                while (!stack1.isEmpty()) {
                    stack2.push(stack1.pop());
                }
            }

            if (stack2.isEmpty()) {
                throw new NoSuchElementException("Queue is empty");
            }

            return stack2.pop();
        }

        public int printFront() {
            if (stack2.isEmpty()) {
                while (!stack1.isEmpty()) {
                    stack2.push(stack1.pop());
                }
            }

            if (stack2.isEmpty()) {
                throw new NoSuchElementException("Queue is empty");
            }

            return stack2.peek();
        }
    }
}
                                                                                                                            
3) 1727. Largest Submatrix With Rearrangements - medium 
class Solution {
    public int largestSubmatrix(int[][] matrix) {
        int m = matrix.length, n = matrix[0].length;
        for (int i = 1; i < m; ++i) {
            for (int j = 0; j < n; ++j) {
                if (matrix[i][j] == 1) {
                    matrix[i][j] = matrix[i - 1][j] + 1;
                }
            }
        }
        int ans = 0;
        for (var row : matrix) {
            Arrays.sort(row);
            for (int j = n - 1, k = 1; j >= 0 && row[j] > 0; --j, ++k) {
                int s = row[j] * k;
                ans = Math.max(ans, s);
            }
        }
        return ans;
    }
}