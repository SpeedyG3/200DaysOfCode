2951. Find the Peaks - easy 
class Solution {
    public List<Integer> findPeaks(int[] mountain) {
        List<Integer> ans = new ArrayList<Integer>();
        if(mountain.length<=2){
            return ans;
        }
        for(int i=1;i<mountain.length-1;i++){
            if(mountain[i]>mountain[i-1] && mountain[i]>mountain[i+1]){
                ans.add(i);
            }
        }
        return ans;       
    }
}

2952. Minimum Number of Coins to be Added - medium 
class Solution {
    public int minimumAddedCoins(int[] coins, int target) {
        Arrays.sort(coins);
        int maxPossible = 0;
        int ans = 0;
        int left = 0;
        
        while (maxPossible < target) {
            if (left < coins.length && coins[left] <= maxPossible + 1) {
                maxPossible += coins[left++];
            } else {
                maxPossible += (maxPossible + 1);
                ans++;
            }
        }

        return ans;
    }
}

1266. Minimum Time Visiting All Points - easy
class Solution {
    public int minTimeToVisitAllPoints(int[][] points) {
        int res=0;
        for(int i=1; i<points.length; i++){
            int [] curr = points[i];
            int [] prev = points[i-1];

            res += Math.max(Math.abs(curr[0]-prev[0]), Math.abs(curr[1]-prev[1]));
        }
        return res;
    }
}

