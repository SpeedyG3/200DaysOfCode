1) 94. Binary Tree Inorder Traversal - easy 
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public List<Integer> inorderTraversal(TreeNode root) {
        ArrayList<Integer> list = new ArrayList<>();
        inorder(root, list);
        return list;
    }
    public static void inorder(TreeNode root, ArrayList<Integer> list){
        if(root == null){
            return;
        }
        inorder(root.left, list);
        list.add(root.val);
        inorder(root.right, list);
    }
}

2) Length of Longest Subarray With at Most K Frequency - easy
class Solution {
    public static int commonFrom_to(int nums1[], int nums2[]){
        HashSet<Integer> hs = new HashSet<>();
        for(int num: nums2){
            hs.add(num);
        }
        int count = 0;
        for(int i=0;i<nums1.length;i++){
            if(hs.contains(nums1[i])){
                count++;
            }
        }
        return count;
    }
    
    public int[] findIntersectionValues(int[] nums1, int[] nums2) {
        int arr[] = new int[2];
        arr[0] = commonFrom_to(nums1, nums2);        
        arr[1] = commonFrom_to(nums2, nums1);
        return arr;
    }
}

3) Remove Adjacent Almost-Equal Characters - medium - not able to solve 
class Solution {
    public int maxSubarrayLength(int[] nums, int k) {
        HashMap<Integer, Integer> freq = new HashMap<>();

        int l = 0;
        int r = 0;
        int maxLength = 0;

        while (r < nums.length) {
            freq.put(nums[r], freq.getOrDefault(nums[r], 0) + 1);
            Integer frequency = freq.get(nums[r]);
            if (frequency != null && frequency <= k) {
                maxLength = Math.max(maxLength, r - l + 1);
                r++;
            } else {
                if (l < nums.length) {
                    freq.put(nums[l], freq.get(nums[l]) - 1);
                    l++;
                } else {
                    break;
                }
            }
        }
        return maxLength;
    }
}
