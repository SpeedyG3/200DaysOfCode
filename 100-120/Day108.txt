1) 1637. Widest Vertical Area Between Two Points Containing No Points - medium
class Solution {
    public int maxWidthOfVerticalArea(int[][] points) {
        //max vertical area => max horizontal distance and height is common(same)
        //max vert area achieved only when max horizontal dist is achieved
        //in this area there must be no existing points excluding boundaries
        //=> boundary may have points
        //as it is vertically infinite and should not have points in it 
        // we can only consider point next to each other wrt x axis
        // and no other x value lies between 2 bounadry x's we chose 

        Arrays.sort(points, (a,b)->a[0]-b[0]);
        int max = 0;
        for(int i=1;i<points.length;i++){
            max = Math.max(points[i][0]-points[i-1][0], max);
        }
        return max;
    }
}

2) 2583. Kth Largest Sum in a Binary Tree - medium
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public long kthLargestLevelSum(TreeNode root, int k) {
        if(root==null){
            return 0;
        }
        ArrayList<Long> sums = new ArrayList<>();
        Queue<TreeNode> q = new LinkedList<>();
        q.add(root);
        q.add(null);
        long sum = 0;
        while(!q.isEmpty()){
            TreeNode curr = q.remove();
            if(curr==null){
                sums.add(sum);
                sum=0;
                if(q.isEmpty()){
                    break;
                }else{    
                    q.add(null);
                }
            }else{
                sum += curr.val;
                if(curr.left!=null){
                    q.add(curr.left);
                }
                if(curr.right!=null){
                    q.add(curr.right);
                }
            }
        }
        Collections.sort(sums);
        if(k>sums.size()){
            return -1;
        }
        return sums.get(sums.size()-k);
    }
}

3) 1161. Maximum Level Sum of a Binary Tree - medium
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public int maxLevelSum(TreeNode root) {
        if(root==null){
            return 0;
        }
        Queue<TreeNode> q = new LinkedList<>();
        q.add(root);
        q.add(null);
        int sum = 0;
        int max = Integer.MIN_VALUE;
        int curr_lvl = 0;
        int lvl = 0;
        while(!q.isEmpty()){
            TreeNode curr = q.remove();
            if(curr==null){
                curr_lvl++;
                if(sum>max){
                    max=sum;
                    lvl=curr_lvl;
                }
                sum=0;
                if(q.isEmpty()){
                    break;
                }else{    
                    q.add(null);
                }
            }else{
                sum += curr.val;
                if(curr.left!=null){
                    q.add(curr.left);
                }
                if(curr.right!=null){
                    q.add(curr.right);
                }
            }
        }
        
        return lvl;
    }
}

4) 34. Find First and Last Position of Element in Sorted Array - medium
class Solution {
    public static int bs(int nums[], int target, boolean isFirst){
        int s = 0;
        int e = nums.length-1;
        int ans = -1;
        while(s<=e){
            int mid = s+(e-s)/2;
            if(nums[mid]==target){
                ans = mid;
                if(isFirst){
                    e = mid-1;
                }else{
                    s = mid+1;
                }
            }else if(nums[mid]>target){
                e = mid - 1;
            }else{
                s = mid + 1;
            }
        }
        return ans;
    }

    public int[] searchRange(int[] nums, int target) {
        
        int first = bs(nums, target, true);
        int second = bs(nums, target, false);
        
        if(first<=second){
            return new int[]{first, second};
        }else{
            return new int[]{-1,-1};
        }
    }
}

5) 436. Find Right Interval - medium
class Solution {
    public static int findRightInterval(int intervals[][], int target){
        int s = 0;
        int e = intervals.length - 1;
        int ans = -1;
        while(s<=e){
            int mid = s+(e-s)/2;
            if(intervals[mid][0]>=target){
                ans = mid;
                e = mid - 1;
            }else{
                s = mid + 1;
            }
        }
        return ans;
    }
    
    public int[] findRightInterval(int[][] intervals) {
        HashMap<Integer, Integer> hm = new HashMap<>();
        int l = intervals.length;
        for(int i=0;i<l;i++){
            hm.put(intervals[i][0],i);
        }
        int ans[] = new int[l];
        Arrays.sort(intervals, (a,b)->a[0]-b[0]);
        for(int i=0;i<l;i++){
            int key = intervals[i][0];
            int index = findRightInterval(intervals, intervals[i][1]);
            // System.out.println(index);
            ans[hm.get(key)] = (index == -1) ? -1 : hm.get(intervals[index][0]);
            // ans[hm.get(key)] = index;
        }
        return ans;
    }
}