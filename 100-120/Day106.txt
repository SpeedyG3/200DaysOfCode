1) 102. binary Level order traversal - medium
solved my confusions regarding list<list>> problems and did LvlOTraversal nicely
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */

class Solution {
    public List<List<Integer>> levelOrder(TreeNode root) {
        List<List<Integer>> ans = new ArrayList<>();
        
        if (root == null) {
            return ans;
        }

        Queue<TreeNode> q = new LinkedList<>();
        q.add(root);
        q.add(null);

        List<Integer> newList = new ArrayList<>();
        while(!q.isEmpty()){
            TreeNode curr = q.remove();
            if(curr==null){
                ans.add(newList);
                if(q.isEmpty()){
                    break;
                }else{
                    // newList.clear(); wrong as refrenced 
                    newList = new ArrayList<>();
                    q.add(null);
                }
            }else{
                newList.add(curr.val);
                if(curr.left!=null){
                    q.add(curr.left);
                }
                if(curr.right!=null){
                    q.add(curr.right);
                }
            }
        }
        return ans;
    }
}

2) 104. Maximum Depth of Binary Tree - easy 
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public int maxDepth(TreeNode root) {
        if(root==null){
            return 0;
        }

        int lh = maxDepth(root.left);
        int rh = maxDepth(root.right);

        return Math.max(lh, rh) + 1;
    }
}

3) 103. Binary Tree Zigzag Level Order Traversal - medium 
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public List<List<Integer>> zigzagLevelOrder(TreeNode root) {
        List<List<Integer>> ans = new ArrayList<>();
        if(root==null){
            return ans;
        }
        Queue<TreeNode> q = new LinkedList<>();
        q.add(root);
        q.add(null);
        //root is done from L to R so false
        boolean rToL = false;
        List<Integer> newList = new ArrayList<>();
        while(!q.isEmpty()){
            TreeNode curr = q.remove();
            if(curr==null){
                ans.add(newList);
                rToL = !rToL;
                if(q.isEmpty()){
                    break;
                }else{
                    newList = new ArrayList<>();
                    q.add(null);
                }
            }else{
                if(rToL){
                    newList.add(0, curr.val);
                }else{
                    newList.add(curr.val);
                }
                if(curr.left!=null){
                    q.add(curr.left);
                }
                if(curr.right!=null){
                q.add(curr.right);
                }
            }
        }
        return ans;
    }
}

4) 100. Same Tree - easy
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public boolean isSameTree(TreeNode p, TreeNode q) {
        if(p==null && q==null){
            return true;
        }
        if(p==null || q==null){
            return false;
        }
        
        return (p.val==q.val) && isSameTree(p.left, q.left) && isSameTree(p.right, q.right);
    }
}

5) 101. Symmetric Tree - easy
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public static boolean Symm(TreeNode a, TreeNode b){
        if(a==null && b==null){
            return true;
        }
        if(a==null || b==null){
            return false;
        }
        if(a.val!=b.val){
            return false;
        }
        return Symm(a.left, b.right) && Symm(a.right, b.left);
    }

    public boolean isSymmetric(TreeNode root) {
        if(root==null){
            return true;
        }
        return Symm(root.left, root.right);
    }
}

6) 661. Image Smoother - easy 
class Solution {
    public int[][] imageSmoother(int[][] img) {
        int r = img.length;
        int c = img[0].length;
        int res[][] = new int[r][c];
        for(int i=0;i<r;i++){
            for(int j=0;j<c;j++){
                int sum = img[i][j];
                int ct = 1;
                if(i>=1){
                    sum+=img[i-1][j];
                    ct++;
                }
                if(j>=1){
                    sum+=img[i][j-1];
                    ct++;
                }
                if(i<=r-2){
                    sum+=img[i+1][j];
                    ct++;
                }
                if(j<=c-2){
                    sum+=img[i][j+1];
                    ct++;
                }
                if(i>=1 && j>=1){
                    sum+=img[i-1][j-1];
                    ct++;
                }
                if(i>=1 && j<=c-2){
                    sum+=img[i-1][j+1];
                    ct++;
                }
                if(i<=r-2 && j<=c-2){
                    sum+=img[i+1][j+1];
                    ct++;
                }
                if(i<=r-2 && j>=1){
                    sum+=img[i+1][j-1];
                    ct++;
                }
                res[i][j] = sum/ct;
            }
        }
        return res;
    }
}