1) 10031. Check if Bitwise OR Has Trailing Zeros - easy
class Solution {
    public boolean hasTrailingZeros(int[] nums) {
        int bm=1;
        int l = nums.length;
        for(int i=0;i<l;i++){
            for(int j=i+1;j<l;j++){
                int or = nums[i] | nums[j];
                if((or&bm)==0){
                    return true;
                }
            }
        }
        return false;
    }
}

2) 1624. Largest Substring Between Two Equal Characters
//my soln
class Solution {
    public int maxLengthBetweenEqualCharacters(String s) {
        int l = 0;
        int r = 2;
        int n = s.length();
        if(n<=2){
            return 0;
        }
        int max = -1;
        while(l<n && r<n && l<r){
            if (s.charAt(l) == s.charAt(r)) {
                max = Math.max(max, r - l - 1);
            }
            r++;
            if (r == n) {
                l++;
                r = l + 2;
            }
        }
        return max;
    }
}

//better - neetcode IO
class Solution {
    public int maxLengthBetweenEqualCharacters(String s) {
        HashMap<Character, Integer> earliestOcc = new HashMap<>();
        int res = -1;
        int l = s.length();
        for(int i=0;i<l;i++){
            char c = s.charAt(i);
            if(earliestOcc.containsKey(c)){
                res = Math.max(res, i-earliestOcc.get(c)-1);
            }else{
                earliestOcc.put(c, i);
            }
        }
        return res;
    }
}

3) 10032. Find Longest Special Substring That Occurs Thrice I - medium 
class Solution {
    public int maximumLength(String s) {
        HashMap<String, Integer> hm = new HashMap<>();
        int l = s.length();
        for(int i=0;i<l;i++){
            for(int j=i;j<l;j++){
                String sub = s.substring(i,j+1);
                hm.put(sub, hm.getOrDefault(sub, 0)+1);
            }
        }
        int ans = -1;
        for (String substring : hm.keySet()) {
            if (isSpecial(substring) && hm.get(substring) >= 3) {
                ans = Math.max(ans, substring.length());
            }
        }

        return ans;
    }
    
    public static boolean isSpecial(String s) {
        if (s.length() == 1) {
            return true;
        }

        char firstChar = s.charAt(0);
        for (char c : s.toCharArray()) {
            if (c != firstChar) {
                return false;
            }
        }

        return true;
    }
}

//slightly better
import java.util.HashMap;

class Solution {
    public int maximumLength(String s) {
        HashMap<String, Integer> hm = new HashMap<>();
        int l = s.length();
        int ans = -1;

        for (int i = 0; i < l; i++) {
            for (int j = i; j < l; j++) {
                String sub = s.substring(i, j + 1);
                
                if (!isSpecial(sub)) {
                    break;
                } else {
                    hm.put(sub, hm.getOrDefault(sub, 0) + 1);
                    if (hm.get(sub) >= 3) {
                        ans = Math.max(ans, sub.length());
                    }
                }
            }
        }
        return ans;
    }

    public static boolean isSpecial(String s) {
        if (s.length() == 1) {
            return true;
        }

        char firstChar = s.charAt(0);
        for (char c : s.toCharArray()) {
            if (c != firstChar) {
                return false;
            }
        }
        return true;
    }
}
