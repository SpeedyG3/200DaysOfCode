1) Aggressive cows - coding ninjas, SPOJ 
// Bin search on answers
//striver
//lin search method -> see video striver
//optimal using bin search ..code below 
import java.util.*;
public class Solution {
    public static boolean canwePlace(int stall[], int dist, int cows){
        int cntCows = 1;
        int last = stall[0];
        for(int i=1;i<stall.length;i++){
            if(stall[i]-last>=dist){
                cntCows++;
                last = stall[i];
            }
            if(cntCows==cows){
                return true;
            }
        }
        return false;
    }
    public static int aggressiveCows(int []stalls, int k) {
        //    Write your code here.
        Arrays.sort(stalls);
        int s = 1;
        int l = stalls.length;
        int e = stalls[l-1]-stalls[0];
        while(s<=e){
            int mid = s+(e-s)/2;
            if(canwePlace(stalls, mid, k)){
                s=mid+1;
            }else{
                e=mid-1;
            }
        }
        return e;
    }
}

2) 4. Median of Two Sorted Arrays - hard
//brute 
class Solution {
    public double findMedianSortedArrays(int[] nums1, int[] nums2) {
        List<Integer> merged = new ArrayList<>();
        int i = 0, j = 0;
        while (i < nums1.length && j < nums2.length) {
            if (nums1[i] < nums2[j]) {
                merged.add(nums1[i++]);
            } else {
                merged.add(nums2[j++]);
            }
        }
        while(i<nums1.length){
            merged.add(nums1[i++]);
        }
        while(j<nums2.length){
            merged.add(nums2[j++]);
        }
        if(merged.size()%2==0){
            return (double)(merged.get(merged.size()/2) + merged.get((merged.size()/2)-1))/2;
        }else{
            return (double)merged.get(merged.size()/2);
        }
    }
}
//better
public class Solution {
    public static double findMedianSortedArrays(int[] a, int[] b) {
        // Size of two given arrays
        int n1 = a.length;
        int n2 = b.length;

        int n = n1 + n2; //total size
        //required indices:
        int ind2 = n / 2;
        int ind1 = ind2 - 1;
        int cnt = 0;
        int ind1el = -1, ind2el = -1;

        //apply the merge step:
        int i = 0, j = 0;
        while (i < n1 && j < n2) {
            if (a[i] < b[j]) {
                if (cnt == ind1) ind1el = a[i];
                if (cnt == ind2) ind2el = a[i];
                cnt++;
                i++;
            } else {
                if (cnt == ind1) ind1el = b[j];
                if (cnt == ind2) ind2el = b[j];
                cnt++;
                j++;
            }
        }

        //copy the left-out elements:
        while (i < n1) {
            if (cnt == ind1) ind1el = a[i];
            if (cnt == ind2) ind2el = a[i];
            cnt++;
            i++;
        }
        while (j < n2) {
            if (cnt == ind1) ind1el = b[j];
            if (cnt == ind2) ind2el = b[j];
            cnt++;
            j++;
        }

        //Find the median:
        if (n % 2 == 1) {
            return (double)ind2el;
        }

        return (double)((double)(ind1el + ind2el)) / 2.0;
    }
}

//optimal see striver 
