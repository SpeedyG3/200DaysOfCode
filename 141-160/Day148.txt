1) Aggressive cows - coding ninjas, SPOJ 
// Bin search on answers
//striver
//lin search method -> see video striver
//optimal using bin search ..code below 
import java.util.*;
public class Solution {
    public static boolean canwePlace(int stall[], int dist, int cows){
        int cntCows = 1;
        int last = stall[0];
        for(int i=1;i<stall.length;i++){
            if(stall[i]-last>=dist){
                cntCows++;
                last = stall[i];
            }
            if(cntCows==cows){
                return true;
            }
        }
        return false;
    }
    public static int aggressiveCows(int []stalls, int k) {
        //    Write your code here.
        Arrays.sort(stalls);
        int s = 1;
        int l = stalls.length;
        int e = stalls[l-1]-stalls[0];
        while(s<=e){
            int mid = s+(e-s)/2;
            if(canwePlace(stalls, mid, k)){
                s=mid+1;
            }else{
                e=mid-1;
            }
        }
        return e;
    }
}

2) 4. Median of Two Sorted Arrays - hard
//brute 
class Solution {
    public double findMedianSortedArrays(int[] nums1, int[] nums2) {
        List<Integer> merged = new ArrayList<>();
        int i = 0, j = 0;
        while (i < nums1.length && j < nums2.length) {
            if (nums1[i] < nums2[j]) {
                merged.add(nums1[i++]);
            } else {
                merged.add(nums2[j++]);
            }
        }
        while(i<nums1.length){
            merged.add(nums1[i++]);
        }
        while(j<nums2.length){
            merged.add(nums2[j++]);
        }
        if(merged.size()%2==0){
            return (double)(merged.get(merged.size()/2) + merged.get((merged.size()/2)-1))/2;
        }else{
            return (double)merged.get(merged.size()/2);
        }
    }
}
//better
public class Solution {
    public static double findMedianSortedArrays(int[] a, int[] b) {
        // Size of two given arrays
        int n1 = a.length;
        int n2 = b.length;

        int n = n1 + n2; //total size
        //required indices:
        int ind2 = n / 2;
        int ind1 = ind2 - 1;
        int cnt = 0;
        int ind1el = -1, ind2el = -1;

        //apply the merge step:
        int i = 0, j = 0;
        while (i < n1 && j < n2) {
            if (a[i] < b[j]) {
                if (cnt == ind1) ind1el = a[i];
                if (cnt == ind2) ind2el = a[i];
                cnt++;
                i++;
            } else {
                if (cnt == ind1) ind1el = b[j];
                if (cnt == ind2) ind2el = b[j];
                cnt++;
                j++;
            }
        }

        //copy the left-out elements:
        while (i < n1) {
            if (cnt == ind1) ind1el = a[i];
            if (cnt == ind2) ind2el = a[i];
            cnt++;
            i++;
        }
        while (j < n2) {
            if (cnt == ind1) ind1el = b[j];
            if (cnt == ind2) ind2el = b[j];
            cnt++;
            j++;
        }

        //Find the median:
        if (n % 2 == 1) {
            return (double)ind2el;
        }

        return (double)((double)(ind1el + ind2el)) / 2.0;
    }
}

//optimal see striver 
//read again 
class Solution {
    public double findMedianSortedArrays(int[] nums1, int[] nums2) {
        //optimal striver soln 
        int n1 = nums1.length;
        int n2 = nums2.length;
        int n = n1 + n2;
        int reqLeft = (n1+n2+1)/2;
        if(n1>n2){
            return findMedianSortedArrays(nums2, nums1);
        }
        int s = 0;
        int e = n1;
        while(s<=e){
            int mid1 = s+(e-s)/2;
            int mid2 = reqLeft - mid1;
            int l1 = Integer.MIN_VALUE;
            int l2 = Integer.MIN_VALUE;
            int r1 = Integer.MAX_VALUE;
            int r2 = Integer.MAX_VALUE;
            if(mid1<n1){
                r1 = nums1[mid1];
            }
            if(mid2<n2){
                r2 = nums2[mid2];
            }
            if(mid1-1>=0){
                l1 = nums1[mid1-1];
            }
            if(mid2-1>=0){
                l2 = nums2[mid2-1];
            }

            if(l1<=r2 && l2<=r1){
                if(n%2==1){
                    return (double)(Math.max(l1, l2));
                }else{
                    return (double)((Math.max(l1, l2)+Math.min(r1, r2))/2.0);
                }
            }else if(l1>r2){
                e = mid1 - 1;
            }else{
                s = mid1 + 1;
            }
        }
        return -1.0;
    }
}

3) Book allocation -> striver -> coding ninjas
//same way (brute) can be done using a linear search
//bs method 
import java.util.*;
public class Solution {
    public static int findPages(ArrayList<Integer> arr, int n, int m) {
        if(m>n){
            return -1;
        }
        int e = 0;
        int s = Integer.MIN_VALUE;
        for(int i=0;i<n;i++){
            s = Math.max(s, arr.get(i));
            e+=arr.get(i);
        }
        
        while(s<=e){
            int mid = s+(e-s)/2;
            int students = countStudents(arr, mid, n);
            if(students>m){ //students less -> more pages / student -> reduce pages
                s=mid+1;
            }else{
                e=mid-1;
            }
        }
        return s;
    }

    public static int countStudents(ArrayList<Integer> arr, int pages, int n){
        int stud = 1;
        int pages_student = 0;
        for(int i=0;i<n;i++){
            if(pages_student+arr.get(i)<=pages){
                pages_student+=arr.get(i);
            }else{
                stud++;
                pages_student=arr.get(i);
            }
        }
        return stud;
    }
}

4) 410. Split Array Largest Sum - hard
//same as book allocation logic, striver 
//coding ninjas book allocation
//optimal bs method 
class Solution {
    public static int findPages(int arr[], int n, int m) {
        if(m>n){
            return -1;
        }
        int e = 0;
        int s = Integer.MIN_VALUE;
        for(int i=0;i<n;i++){
            s = Math.max(s, arr[i]);
            e+=arr[i];
        }
        
        while(s<=e){
            int mid = s+(e-s)/2;
            int students = countStudents(arr, mid, n);
            if(students>m){ 
                s=mid+1;
            }else{
                e=mid-1;
            }
        }
        return s;
    }

    public static int countStudents(int arr[], int pages, int n){
        int stud = 1;
        int pages_student = 0;
        for(int i=0;i<n;i++){
            if(pages_student+arr[i]<=pages){
                pages_student+=arr[i];
            }else{
                stud++;
                pages_student=arr[i];
            }
        }
        return stud;
    }

    public int splitArray(int[] nums, int k) {
        return findPages(nums, nums.length, k);
    }
}

5)  Painter's Partition Problem - coding ninjas striver
//striver sheet optimal solution(binary search)
//brute would be using linear search 
//same as bank allocation problem (coding ninjas) and split array largest sum (LC - 410) 
import java.util.ArrayList;

public class Solution {
    public static int findPages(ArrayList<Integer> arr, int n, int m) {
        if(m>n){
            return -1;
        }
        int e = 0;
        int s = Integer.MIN_VALUE;
        for(int i=0;i<n;i++){
            s = Math.max(s, arr.get(i));
            e+=arr.get(i);
        }
        
        while(s<=e){
            int mid = s+(e-s)/2;
            int students = countStudents(arr, mid, n);
            if(students>m){ //students less -> more pages / student -> reduce pages
                s=mid+1;
            }else{
                e=mid-1;
            }
        }
        return s;
    }

    public static int countStudents(ArrayList<Integer> arr, int pages, int n){
        int stud = 1;
        int pages_student = 0;
        for(int i=0;i<n;i++){
            if(pages_student+arr.get(i)<=pages){
                pages_student+=arr.get(i);
            }else{
                stud++;
                pages_student=arr.get(i);
            }
        }
        return stud;
    }

    public static int findLargestMinDistance(ArrayList<Integer> boards, int k){
        return findPages(boards, boards.size(), k);
    }
}

6) 2966. Divide Array Into Arrays With Max Difference - medium
//solved by me in one of the contests
class Solution {
    public int[][] divideArray(int[] nums, int k) {
        Arrays.sort(nums);
        int l = nums.length;
        int ans[][] = new int[l/3][3];
        int t = 0;
        int i=0, j=1, m=2;
        boolean chk = true;
        while(i+2<l){
            if(Math.abs(nums[i]-nums[j])<=k && Math.abs(nums[j]-nums[m])<=k && Math.abs(nums[i]-nums[m])<=k){
                int arr[] = {nums[i], nums[j], nums[m]};
                ans[t] = arr;
                t++;
            }else{
                chk = false;
                break;
            }
            i+=3;
            j+=3;
            m+=3;
        }
        if(!chk){
            return new int[][]{};
        }
        return ans;
        
    }
}

7) 1291. Sequential Digits - medium
class Solution {
    public List<Integer> sequentialDigits(int low, int high) {
        List<Integer> ans = new ArrayList<>();
        for(int p=1;p<10;p++){ //start dig
            int a = p;
            int next = p+1;
            while(next<=9){
                a=a*10+next;
                if(a>=low && a<=high){
                    ans.add(a);
                }
                next++;                
            }
        }
        Collections.sort(ans);
        return ans;
    }
}