1) 451. Sort Characters By Frequency - medium 
//view neetcode io video
class Solution {
    public String frequencySort(String s) {
        // Step 1: Count the frequency of each character
        HashMap<Character, Integer> map = new HashMap<>();
        for(Character c: s.toCharArray()) map.put(c, map.getOrDefault(c,0)+1);
        
        // Step 2: Create buckets based on the frequency
        //let me explain this part
        //the index of bucket is the frequency 
        //the list is used to store the elements of that frequency(at the index)
        List<Character>[] bucket = new ArrayList[s.length()+1];
        for(Character c: map.keySet()){
            if(bucket[map.get(c)]==null) //initialise arraylist at the indices
                bucket[map.get(c)]= new ArrayList<>();
            bucket[map.get(c)].add(c);
        }

        // Step 3: Iterate through the buckets and build the result
        StringBuilder result = new StringBuilder();
        for(int i= bucket.length-1; i>=0; i--){
            if(bucket[i]!=null){
                for(Character c: bucket[i])
                    for(int j=0; j<i; j++) //upto the frequency -> append freq number of times
                        result.append(c);
            }
        }
        return result.toString();   
    }
}

2)
//brute solution 
class Solution { //maybe refer neetcode io and another link that i provide
//https://leetcode.com/problems/perfect-squares/solutions/4694964/interview-approach-clean-code-optimise-to-dp/?envType=daily-question&envId=2024-02-08
    public int numSquares(int n) {
        if(n==0){
            return 0;
        }if(n<0){
            return Integer.MAX_VALUE;
        }

        int ans = Integer.MAX_VALUE;
        for(int i=1;i*i<=n;i++){
            ans = Math.min(ans, 1+numSquares(n-(i*i)));    
        }
        return ans;
    }
}

//optimising
//memoisation 
// https://leetcode.com/problems/perfect-squares/solutions/4694964/interview-approach-clean-code-optimise-to-dp/?envType=daily-question&envId=2024-02-08
class Solution { //maybe refer neetcode io and another link that i provided above
    public int numSquares(int n) {
        int dp[] = new int[n+1];
        Arrays.fill(dp, -1);
        return solve(dp, n);
    }

    public static int solve(int dp[], int n){
        if(n==0){
            return 0;
        }if(n<0){
            return Integer.MAX_VALUE;
        }
        if(dp[n]!=-1){
            return dp[n];
        }
        int ans = Integer.MAX_VALUE;
        for(int i=1;i*i<=n;i++){
            ans = Math.min(ans, 1+solve(dp, n-(i*i)));    
        }
        return dp[n] = ans;
    }
}

//optimising
//tabulation
// https://leetcode.com/problems/perfect-squares/solutions/4694964/interview-approach-clean-code-optimise-to-dp/?envType=daily-question&envId=2024-02-08
class Solution { //maybe refer neetcode io and another link that i provided above
    public int numSquares(int n) {
        int dp[] = new int[n+1];
        Arrays.fill(dp, n);
        dp[0] = 0;

        for(int i=1;i<=n;i++){
            for(int j=1;j*j<=i;j++){
                dp[i] = Math.min(dp[i], 1+dp[i-(j*j)]);
            }
        }

        return dp[n];
    }
}