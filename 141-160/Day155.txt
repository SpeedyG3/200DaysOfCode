1) 13. Roman to Integer - easy
class Solution {
    public int romanToInt(String s) {
        int val = 0;
        int n = s.length();

        for(int i=0;i<n;i++){
            char curr = s.charAt(i);
            if(i+1<n && romanVal(s.charAt(i+1))>romanVal(curr)){
                val -= romanVal(curr);
            }else{
                val += romanVal(curr);
            }
        }

        return val;
    }

    public static int romanVal(char roman){
        switch(roman){
            case 'I': return 1;
            case 'V': return 5;
            case 'X': return 10;
            case 'L': return 50;
            case 'C': return 100;
            case 'D': return 500;
            case 'M': return 1000;
            default: return 0;
        }
    }
}

2) 12. Integer to Roman - medium 

3) 368. Largest Divisible Subset - medium
class Solution {
    public List<Integer> largestDivisibleSubset(int[] nums) {
        
        int n = nums.length;
        int count[] = new int[n]; //dp array 
        int pre[] = new int[n];

        Arrays.sort(nums);
        int max = 0, index = -1;

        for(int i = 0; i < n; i++) {
            count[i] = 1;
            pre[i] = -1;

            for(int j = i-1; j >= 0; j--) {
                if(nums[i] % nums[j] == 0) {
                    if(1 + count[j] > count[i]) {
                        count[i] = count[j] + 1;
                        pre[i] = j;
                    }
                }
            }
            if(count[i] > max) {
                max = count[i];
                index = i;
            }
        }
        List<Integer> res = new ArrayList<>();
        while(index != -1) {
            res.add(nums[index]);
            index = pre[index];
        }
        return res;
    }
}