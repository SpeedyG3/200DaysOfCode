1) 1235. Maximum Profit in Job Scheduling - hard
class Solution {
    public int jobScheduling(int[] startTime, int[] endTime, int[] profit) {
        int len = startTime.length;
        int[][] dp = new int[len][3];
        for(int i=0; i<len; i++){
            dp[i] = new int[]{startTime[i], endTime[i], profit[i]};
        }

        Arrays.sort(dp, (a,b)->a[1]-b[1]);
        TreeMap<Integer, Integer> map = new TreeMap<>();
        map.put(0, 0);
        for(var i:dp){
            int cur = map.floorEntry(i[0]).getValue() + i[2];
            if(cur > map.lastEntry().getValue()){
                map.put(i[1], cur);
            }
        }

        return map.lastEntry().getValue();
    }
}

2) Smallest Missing Integer Greater Than Sequential Prefix Sum - easy
import java.util.ArrayList;

class Solution {
    public int missingInteger(int[] nums) {
        int n = nums.length;
        if(n==1){
            return nums[0]+1;
        }
        int ans = -1;
        int sum = nums[0];
        int breakpt = 0;
        
        for (int i = 1; i < n; i++) {
            if (nums[i] == nums[i - 1] + 1) {
                sum += nums[i];
                ans = sum;
            } else {
                ans = sum;
                breakpt = i;
                break;
            }
        }
        
        ArrayList<Integer> list = new ArrayList<>();
        if(breakpt==1){
            ans = sum+1;
        }
        while (breakpt < n) {
            list.add(nums[breakpt]);
            breakpt++;
        }
        
        while (list.contains(ans)) {
            ans++;
        }
        
        return ans;
    }
}
