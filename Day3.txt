1) Max Product Subarray - medium 
class Solution {
    public int maxProduct(int[] nums) {
        int n = nums.length;
        int pre=1, suff=1;
        int ans=Integer.MIN_VALUE;
        for(int i=0;i<n;i++){
            if(pre==0){
                pre=1;
            }
            if(suff==0){
                suff=1;
            }
            pre*=nums[i];
            suff*=nums[n-i-1];
            ans = Math.max(ans, Math.max(pre, suff));
        }
        return ans;
    }
}

2) Permutations - medium 
class Solution {
    public static void generatePermutations(int[] nums, boolean[] used, List<Integer> current, List<List<Integer>> result) {
        if (current.size() == nums.length) {
            result.add(new ArrayList<>(current));
            return;
        }

        for (int i = 0; i < nums.length; i++) {
            if (!used[i]) {
                current.add(nums[i]);
                used[i] = true;
                generatePermutations(nums, used, current, result);
                used[i] = false;
                current.remove(current.size() - 1);
            }
        }
    }

    public List<List<Integer>> permute(int[] nums) {
        List<List<Integer>> result = new ArrayList<>();
        List<Integer> current = new ArrayList<>();
        boolean[] used = new boolean[nums.length];
        generatePermutations(nums, used, current, result);
        return result;
    }
}


3) Robot Return to Origin - easy
class Solution {
    public boolean judgeCircle(String moves) {
        int vertCt = 0;
        int horCt = 0;
        for(int i=0;i<moves.length();i++){
            char c = moves.charAt(i);
            if(c=='U'){
                vertCt++;
            }else if(c=='D'){
                vertCt--;
            }else if(c=='R'){
                horCt++;
            }else{
                horCt--;
            }
        }

        if(horCt==0 && vertCt==0){
            return true;
        }
        return false;
    }
}

4)String to Lower Case - easy
class Solution {
    public String toLowerCase(String s) {
        return s.toLowerCase();
    }
}

5) Maximum Average Subarray I  - easy --> worse solution 
class Solution {
    public double findMaxAverage(int[] nums, int k) {
        int maxSum = Integer.MIN_VALUE;
        for(int i=0;i<=nums.length-k;i++){
            int sum = 0;
            for(int j=i;j<i+k;j++){
                sum += nums[j];
            }
            maxSum = Math.max(maxSum, sum);
        }
        return (double)maxSum/k;
    }
}

--> Better Solution 
class Solution {
    public double findMaxAverage(int[] nums, int k) {
        int windowOpening = 0;
        int sum = 0;
        int max = Integer.MIN_VALUE;
        for(int i = 0; i < nums.length; i++) {
            sum += nums[i];
            if(i >= k - 1) {
                max = Math.max(max, sum);
                sum -= nums[windowOpening++];
            }
        }
        return (double)max/k;
    }
}

6) Binary Number with alternating bits - easy
class Solution {
    public boolean hasAlternatingBits(int n) {
        String s = Integer.toBinaryString(n);
        char prev = s.charAt(0);
        for(int i=1; i<s.length(); i++) {
            int x = Character.compare(prev, s.charAt(i));
            System.out.println(x);
            if(x == 0) {
                return false;
            } 
            prev = s.charAt(i);
        }
        return true;
    }
}

