1) Number of Flowers in Full Bloom - hard - redone but still not very clear
class Solution {
    public static int binarySearch(int[] arr, int target) {
        int s = 0;
        int e = arr.length-1;
        int idx = arr.length; //we return idx which is like the number of flowers bloomeed or died based on the call
        //also even though it is a 0 indexed the difference would cause us to get the same result
        while(s<=e){
            int mid = s+(e-s)/2;
            if(arr[mid]>=target){
                idx = mid;
                e = mid-1;
            }else{
                s = mid+1;
            }
        }
        return idx;
    }

    public int[] fullBloomFlowers(int[][] flowers, int[] people) {
        int n = flowers.length;
        int start[] = new int[n];
        int end[] = new int[n];
        for(int i=0;i<n;i++){
            start[i] = flowers[i][0];
            end[i] = flowers[i][1];
        }
        Arrays.sort(start);
        Arrays.sort(end);

        int p = people.length;
        int ct[] = new int[p];
        for(int i=0;i<p;i++){
            int bloomed = binarySearch(start, people[i]+1);
            int died = binarySearch(end, people[i]);
            ct[i] = bloomed - died;
        }
        return ct;
    }
}

2) Find in mountain Array - hard 
 
class Solution {
    public int findInMountainArray(int target, MountainArray mountainArr) {
        int length = mountainArr.length();
        int peakIndex = findPeak(mountainArr, length);

        int result = findTarget(mountainArr, 0, peakIndex, target, true);
        if (result != -1) {
            return result;
        }

        return findTarget(mountainArr, peakIndex + 1, length - 1, target, false);
    }

    private int findTarget(MountainArray mountainArr, int left, int right, int target, boolean isUpside) {
        while (left <= right) {
            int mid = (left + right) / 2;
            int midVal = mountainArr.get(mid);

            if (midVal == target) {
                return mid;
            }

            if (isUpside) {
                if (target > midVal) {
                    left = mid + 1;
                } else {
                    right = mid - 1;
                }
            } else {
                if (target > midVal) {
                    right = mid - 1;
                } else {
                    left = mid + 1;
                }
            }
        }

        return -1;
    }

    private int findPeak(MountainArray mountainArr, int length) {
        int left = 0;
        int right = length - 1;

        while (left < right) {
            int mid = (left + right) / 2;
            if (mountainArr.get(mid) < mountainArr.get(mid + 1)) {
                left = mid + 1;
            } else {
                right = mid;
            }
        }

        return left;
    }    
}