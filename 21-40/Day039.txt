1) - easy 
class Solution {
    public static int Tab(int cost[], int dp[], int n){
        dp[0] = 0;
        dp[1] = 0;
        dp[2] = Math.min(cost[1], cost[0]);
        for(int i=3;i<=n;i++){
            dp[i] = Math.min(dp[i-1] + cost[i-1], dp[i-2] + cost[i-2]); 
        }
        return dp[n];
    }
    public int minCostClimbingStairs(int[] cost) {
        //start from s1(0) and start from s2(1) -> min 
        int n = cost.length;
        int dp[] = new int[n+1];
        Arrays.fill(dp, -1);
        return Tab(cost, dp, n);
    }
}

//another soln smaller code but memory a bit bad
class Solution {
    public int minCostClimbingStairs(int[] cost) {
        int n = cost.length;
        int dp[] = new int[n+1];
        for(int i=2;i<=n;i++){
            dp[i] = Math.min(dp[i-1] + cost[i-1], dp[i-2] + cost[i-2]); 
        }
        return dp[n];
    }
}

2) Reverse Linked list - easy 
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode reverseList(ListNode head) {
        ListNode curr = head;
        ListNode prev = null;
        ListNode nextNode;
        while(curr!=null){
            nextNode = curr.next;
            curr.next = prev;
            prev = curr;
            curr = nextNode;
        }
        return prev;
    }
}

3) Reverse Linked List - 2 - medium 
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode reverseBetween(ListNode head, int left, int right) {
        if(left>=right){
            return head;
        }
        int i = 1;
        ListNode prev = null;
        ListNode curr = head;
        while(i<left){
            prev = curr;
            curr = curr.next;
            i++;
        }
        ListNode l = prev;
        ListNode r = curr;
        ListNode nextNode;
        while(curr!=null && i<=right){
            nextNode = curr.next;
            curr.next = prev;
            prev = curr;
            curr = nextNode;
            i++;
        }
        r.next = curr;
        if(l!=null){
            l.next = prev;
        }else{
            head = prev;
        }
        return head;
    }
}