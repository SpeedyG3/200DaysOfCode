1) Painting walls - hard -> i don't know how to do this at all... complicated logic and code for me
class Solution {
    public int paintWalls(int[] cost, int[] time) {
        int n = cost.length;
        int[][] dp = new int[n + 1][n + 1];
        
        for (int i = 1; i <= n; i++) {
            dp[n][i] = (int) 1e9;
        }
        int opt1;
        int opt2;
        for (int i = n - 1; i >= 0; i--) {
            for (int remain = 1; remain <= n; remain++) {
                opt1 = cost[i] + dp[i + 1][Math.max(0, remain - 1 - time[i])];
                opt2 = dp[i + 1][remain];
                dp[i][remain] = Math.min(opt1, opt2);
            }
        }
        
        return dp[0][n];
    }
}

2) add numbers LL - medium 
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public static ListNode reverse(ListNode head){
        if(head.next==null || head==null){
            return head;
        }
        ListNode prev = null;
        ListNode curr = head;
        ListNode nextNode;
        while(curr!=null)
        {
            nextNode = curr.next;
            curr.next = prev;
            prev = curr;
            curr = nextNode;
        }
        return prev;
    }

    public static ListNode addFirst(ListNode head, int d){
        ListNode newNode = new ListNode(d, head);
        return newNode; 
    }

    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        int carry = 0;
        ListNode head = null;
        while(l1!=null || l2!=null){
            int sum=0;
            if(l1!=null){
                sum+=l1.val;
            }
            if(l2!=null){
                sum+=l2.val;
            }
            sum+=carry;
            carry = 0;
            if(sum>=10){
                carry=sum/10;
                sum=sum%10;
            }
            
            head = addFirst(head, sum);
            if(l1!=null){
                l1=l1.next;
            }
            if(l2!=null){
                l2=l2.next;
            }
        }
        if(carry!=0){
            head = addFirst(head, carry);
        }
        head = reverse(head);
        return head;
    }
}