1) Painting walls - hard -> i don't know how to do this at all... complicated logic and code for me
class Solution {
    public int paintWalls(int[] cost, int[] time) {
        int n = cost.length;
        int[][] dp = new int[n + 1][n + 1];
        
        for (int i = 1; i <= n; i++) {
            dp[n][i] = (int) 1e9;
        }
        int opt1;
        int opt2;
        for (int i = n - 1; i >= 0; i--) {
            for (int remain = 1; remain <= n; remain++) {
                opt1 = cost[i] + dp[i + 1][Math.max(0, remain - 1 - time[i])];
                opt2 = dp[i + 1][remain];
                dp[i][remain] = Math.min(opt1, opt2);
            }
        }
        
        return dp[0][n];
    }
}

2) add numbers LL - medium 
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public static ListNode reverse(ListNode head){
        if(head.next==null || head==null){
            return head;
        }
        ListNode prev = null;
        ListNode curr = head;
        ListNode nextNode;
        while(curr!=null)
        {
            nextNode = curr.next;
            curr.next = prev;
            prev = curr;
            curr = nextNode;
        }
        return prev;
    }

    public static ListNode addFirst(ListNode head, int d){
        ListNode newNode = new ListNode(d, head);
        return newNode; 
    }

    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        int carry = 0;
        ListNode head = null;
        while(l1!=null || l2!=null){
            int sum=0;
            if(l1!=null){
                sum+=l1.val;
            }
            if(l2!=null){
                sum+=l2.val;
            }
            sum+=carry;
            carry = 0;
            if(sum>=10){
                carry=sum/10;
                sum=sum%10;
            }
            
            head = addFirst(head, sum);
            if(l1!=null){
                l1=l1.next;
            }
            if(l2!=null){
                l2=l2.next;
            }
        }
        if(carry!=0){
            head = addFirst(head, carry);
        }
        head = reverse(head);
        return head;
    }
}

3) 
100078. Longest Unequal Adjacent Groups Subsequence I
User Accepted:9006
User Tried:9898
Total Accepted:9283
Total Submissions:14501
Difficulty:Medium
You are given an integer n, a 0-indexed string array words, and a 0-indexed binary array groups, both arrays having length n.

You need to select the longest subsequence from an array of indices [0, 1, ..., n - 1], such that for the subsequence denoted as [i0, i1, ..., ik - 1] having length k, groups[ij] != groups[ij + 1], for each j where 0 < j + 1 < k.

Return a string array containing the words corresponding to the indices (in order) in the selected subsequence. If there are multiple answers, return any of them.

A subsequence of an array is a new array that is formed from the original array by deleting some (possibly none) of the elements without disturbing the relative positions of the remaining elements.

Note: strings in words may be unequal in length.

 

Example 1:

Input: n = 3, words = ["e","a","b"], groups = [0,0,1]
Output: ["e","b"]
Explanation: A subsequence that can be selected is [0,2] because groups[0] != groups[2].
So, a valid answer is [words[0],words[2]] = ["e","b"].
Another subsequence that can be selected is [1,2] because groups[1] != groups[2].
This results in [words[1],words[2]] = ["a","b"].
It is also a valid answer.
It can be shown that the length of the longest subsequence of indices that satisfies the condition is 2.
Example 2:

Input: n = 4, words = ["a","b","c","d"], groups = [1,0,1,1]
Output: ["a","b","c"]
Explanation: A subsequence that can be selected is [0,1,2] because groups[0] != groups[1] and groups[1] != groups[2].
So, a valid answer is [words[0],words[1],words[2]] = ["a","b","c"].
Another subsequence that can be selected is [0,1,3] because groups[0] != groups[1] and groups[1] != groups[3].
This results in [words[0],words[1],words[3]] = ["a","b","d"].
It is also a valid answer.
It can be shown that the length of the longest subsequence of indices that satisfies the condition is 3.
 

Constraints:

1 <= n == words.length == groups.length <= 100
1 <= words[i].length <= 10
0 <= groups[i] < 2
words consists of distinct strings.
words[i] consists of lowercase English letters.
class Solution {
    public List<String> getWordsInLongestSubsequence(int n, String[] words, int[] groups) {
        List<String>[][] dp = new ArrayList[n + 1][2];
        
        for (int i = 0; i <= n; i++) {
            for (int j = 0; j < 2; j++) {
                dp[i][j] = new ArrayList<>();
            }
        }

        for (int i = 1; i <= n; i++) {
            for (int j = 0; j < 2; j++) {
                if (groups[i - 1] == j) {
                    List<String> without = new ArrayList<>(dp[i - 1][j]);
                    List<String> with = new ArrayList<>(dp[i - 1][1 - j]);
                    with.add(words[i - 1]);
                    if (with.size() > without.size()) {
                        dp[i][j] = with;
                    } else {
                        dp[i][j] = without;
                    }
                } else {
                    dp[i][j] = new ArrayList<>(dp[i - 1][j]);
                }
            }
        }

        List<String> result = dp[n][0].size() > dp[n][1].size() ? dp[n][0] : dp[n][1];
        return result;
    }
}

4) 100095. Last Visited Integers
User Accepted:11587
User Tried:12923
Total Accepted:11962
Total Submissions:19379
Difficulty:Easy
Given a 0-indexed array of strings words where words[i] is either a positive integer represented as a string or the string "prev".

Start iterating from the beginning of the array; for every "prev" string seen in words, find the last visited integer in words which is defined as follows:

Let k be the number of consecutive "prev" strings seen so far (containing the current string). Let nums be the 0-indexed array of integers seen so far and nums_reverse be the reverse of nums, then the integer at (k - 1)th index of nums_reverse will be the last visited integer for this "prev".
If k is greater than the total visited integers, then the last visited integer will be -1.
Return an integer array containing the last visited integers.

 

Example 1:

Input: words = ["1","2","prev","prev","prev"]
Output: [2,1,-1]
Explanation: 
For "prev" at index = 2, last visited integer will be 2 as here the number of consecutive "prev" strings is 1, and in the array reverse_nums, 2 will be the first element.
For "prev" at index = 3, last visited integer will be 1 as there are a total of two consecutive "prev" strings including this "prev" which are visited, and 1 is the second last visited integer.
For "prev" at index = 4, last visited integer will be -1 as there are a total of three consecutive "prev" strings including this "prev" which are visited, but the total number of integers visited is two.
Example 2:

Input: words = ["1","prev","2","prev","prev"]
Output: [1,2,1]
Explanation:
For "prev" at index = 1, last visited integer will be 1.
For "prev" at index = 3, last visited integer will be 2.
For "prev" at index = 4, last visited integer will be 1 as there are a total of two consecutive "prev" strings including this "prev" which are visited, and 1 is the second last visited integer.
 

Constraints:

1 <= words.length <= 100
words[i] == "prev" or 1 <= int(words[i]) <= 100
Java	

class Solution {
    public List<Integer> lastVisitedIntegers(List<String> words) {
        List<Integer> ans = new ArrayList<>();
        int r = 0;
        while(r < words.size()){
            if(words.get(r).equals("prev")){
                int l = r - 1;
                int prevct = 1;
                r++;
                while(r < words.size() && words.get(r).equals("prev")){
                    prevct++;
                    r++;
                }
                while(prevct > 0){
                    while (l >= 0 && words.get(l).equals("prev")) {
                        l--;
                    }
                    if(l < 0){
                        ans.add(-1);
                    }else{
                        ans.add(Integer.parseInt(words.get(l)));
                    }
                    l--;
                    prevct--;
                }
            }else{
                r++;
            }
        }
        return ans;
    }
}
