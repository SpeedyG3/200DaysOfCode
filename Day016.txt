1) LCS - medium 
lcs using memoisation(top down) using recursion 
class Solution {
    public static int lcsMemo(int dp[][], String str1,
    String str2, int n, int m){
        if(n==0||m==0){
            return 0;
        }
        if(dp[n][m]!=-1){
            return dp[n][m];
        }
        if(str1.charAt(n-1)==str2.charAt(m-1)){
             return dp[n][m] = lcsMemo(dp, str1, str2, n-1, m-1) + 1;
        }else{
            return dp[n][m] = Math.max(lcsMemo(dp, str1, str2, n, m-1),
            lcsMemo(dp, str1, str2, n-1, m));
        }
    }

    public int longestCommonSubsequence(String text1, String text2) {
        int n = text1.length();
        int m = text2.length();
        int dp[][] = new int[n+1][m+1];
        for(int i=0;i<n+1;i++){
            for(int j=0;j<m+1;j++){
                dp[i][j] = -1;
            }
        }
        return lcsMemo(dp, text1, text2, n, m);
    }
}

write also for lcs using tabulation
--> same logic but with tabulation, slightly better on lc wrt memory and space
class Solution {
    public int longestCommonSubsequence(String text1, String text2) {
        int n = text1.length();
        int m = text2.length();
        int dp[][] = new int[n+1][m+1];
        for(int i=1;i<n+1;i++){
            for(int j=1;j<m+1;j++){
                if(text1.charAt(i-1)==text2.charAt(j-1)){
                    dp[i][j] = 1+dp[i-1][j-1];
                }else{
                    dp[i][j] = Math.max(dp[i][j-1], dp[i-1][j]);
                }
            }
        }
        return dp[n][m];
    }
}

2) Longest Increasing Subsequence
class Solution {
    public static int lcs(int arr1[], int arr2[]){
        int n = arr1.length;
        int m = arr2.length;
        int dp[][] = new int[n+1][m+1];

        for(int i=1;i<n+1;i++){
            for(int j=1;j<m+1;j++){
                if(arr1[i-1]==arr2[j-1]){
                    dp[i][j] = 1 + dp[i-1][j-1];
                }else{
                    dp[i][j] = Math.max(dp[i-1][j], dp[i][j-1]);
                }
            }
        }
        return dp[n][m];
    }

    public int lengthOfLIS(int arr1[]){
        int n = arr1.length;
        HashSet<Integer> set = new HashSet<>();
        for(int i=0;i<n;i++){
            set.add(arr1[i]);
        }
        //all unique of arr in set
        //now sort
        int arr2[] = new int[set.size()]; //sort unique ele
        int i=0;
        for(int num: set){
            arr2[i] = num;
            i++;
        }
        Arrays.sort(arr2);
        //arr2 is sorted version unique of arr1

        //now question is lcs but for 2 arrays
        return lcs(arr1, arr2);
    }
}