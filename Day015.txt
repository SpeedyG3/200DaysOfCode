1) - easy 
class Solution {
    public int numSpecial(int[][] mat) {
        int n = mat.length;
        int m = mat[0].length;
        int res = 0;
        if(n == 1 && n == 1) return mat[0][0];
        int flag = 0;
        int col = -1;
        for(int i=0; i<n; i++){
            flag = 0;
            for(int j=0; j<m; j++){
                if(mat[i][j] == 1){
                    flag += 1;
                    col = j;
                } 
            }
                if(flag == 1){
                    flag = 0;
                    for(int row = 0; row<n; row++){
                        if(mat[row][col] == 1){
                            flag += 1;
                        }
                    }
                }
            if(flag == 1){
                res += 1; 
            }
        }
        return res;
    }
}

2) Coin change II - medium 
--> ideal solution/technique
good solution but then bad memory and space percentile on leetcode 
try with 1d array for this
class Solution {
    public int change(int sum, int[] coins) {
        int n = coins.length;
        int dp[][] = new int[n+1][sum+1];
        //base case initialisation 
        // i->coins j->sum/amt/change
        for(int i=0;i<n+1;i++){
            dp[i][0] = 1;
        } //other init is not needed as we do to dp[0][j]=0 is done by default by java

        for(int i=1;i<n+1;i++){
            for(int j=1;j<sum+1;j++){
                int v = coins[i-1]; 
                if(v<=j){ //valid
                //dont add v here as we only need ways
                    dp[i][j] = dp[i][j-v] + dp[i-1][j];
                }else{ //exclude
                    dp[i][j] = dp[i-1][j];
                }
            }
        }
        // for(int i=0;i<n+1;i++){
        //     for(int j=0;j<w+1;j++){
        //         System.out.print(dp[i][j]+" ");
        //     }
        //     System.out.println( );
        // }
        return dp[n][sum];
    }
}

3) Coin change I - medium
