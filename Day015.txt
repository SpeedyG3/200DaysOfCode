1) Special Positions in a Binary Matrix - easy 
class Solution {
    public int numSpecial(int[][] mat) {
        int n = mat.length;
        int m = mat[0].length;
        int res = 0;
        if(n == 1 && n == 1) return mat[0][0];
        int flag = 0;
        int col = -1;
        for(int i=0; i<n; i++){
            flag = 0;
            for(int j=0; j<m; j++){
                if(mat[i][j] == 1){
                    flag += 1;
                    col = j;
                } 
            }
                if(flag == 1){
                    flag = 0;
                    for(int row = 0; row<n; row++){
                        if(mat[row][col] == 1){
                            flag += 1;
                        }
                    }
                }
            if(flag == 1){
                res += 1; 
            }
        }
        return res;
    }
}

2) Coin change II - medium 
--> ideal solution/technique
good solution but then bad memory and space percentile on leetcode 
try with 1d array for this
class Solution {
    public int change(int sum, int[] coins) {
        int n = coins.length;
        int dp[][] = new int[n+1][sum+1];
        //base case initialisation 
        // i->coins j->sum/amt/change
        for(int i=0;i<n+1;i++){
            dp[i][0] = 1;
        } //other init is not needed as we do to dp[0][j]=0 is done by default by java

        for(int i=1;i<n+1;i++){
            for(int j=1;j<sum+1;j++){
                int v = coins[i-1]; 
                if(v<=j){ //valid
                //dont add v here as we only need ways
                    dp[i][j] = dp[i][j-v] + dp[i-1][j];
                }else{ //exclude
                    dp[i][j] = dp[i-1][j];
                }
            }
        }
        // for(int i=0;i<n+1;i++){
        //     for(int j=0;j<w+1;j++){
        //         System.out.print(dp[i][j]+" ");
        //     }
        //     System.out.println( );
        // }
        return dp[n][sum];
    }
}

3) Coin change I - medium 
(headache....i have my solution which is close but not correct..so had to refer submissions )
//submission of
// DP java O(amount * coins.length) time, O(amount) space, detailed explanation maybe?
// mmdai021219
// A typical DP problem, I try to write a clear explaination as an oral expression practice.

// Approach
// Create an array for our dp approach called dp, and we define that the ith element in this array means the minimum number of coins to construct the amount i; Therefore we need the length of this array to be amount + 1 so that we can have the anwser for the dp[amount], which is what the question asks for. And we initialize dp[0] as 0 since no coin is needed to have amount 0;

// Then we will try to find out how can we have a state transition in this problem becasue we are having a dynamic programming approach; First we've defined the dp array and it is meant to store the min number of coins to construct an amount, so if we want to know the dp[amount], assume that we've got the value from dp[0] to dp[amount - 1], then the min num of coin can be represented as:
// (coin:coins in the following line means each coin in coins array)
// dp[amount] = min value among all the values of dp[amount - coin:coins] + 1
// Say it in another way We can have all the cases for each coin we have,
// we take the dp[difference of amount and the current coin] and plus one, the plus one means that the one current coin we add.

// Then we initialize the array with amount + 1 except for 0. In this way all the values that can't be constructed by the coins we have will be greater than amount. In the return statement, we can then write : if the dp[amount] is greater than amount, return -1, else return dp[amount] which is the correct answer.
// (dp[amount] > amount ? -1 : dp [amount])

// I'm not good at explainning things, but I tried to explain and it took me quite some time. If you come up with more detailed words please comment and let me know so that I can improve it. If it helps you please upvote.

// Complexity
// Time complexity:O(amount * coins.length)
// Space complexity:O(amount)
// Code
class Solution {
    public int coinChange(int[] coins, int amount) {
        int[] dp = new int[amount+1];
        Arrays.fill(dp,amount + 1); //fill with any large val
        dp[0] = 0; //amt=0 no coins needed
        for(int i = 1; i < amount + 1; i++){
            for(int coin : coins){
                if(i - coin >= 0){
                    dp[i] = Math.min(dp[i], dp[i-coin] + 1);
                }
            }
        }
        return dp[amount] > amount ? -1 : dp[amount];
    }
}

//my code which i wrote and can't figure out how to make it work 
// class Solution {
//     public int coinChange(int[] coins, int sum) {
//         int n = coins.length;
//         int dp[][] = new int[n+1][sum+1];

//         for(int i=1;i<n+1;i++){
//             for(int j=1;j<sum+1;j++){
//                 int v = coins[i-1]; 
//                 if(v<=j){ 
//                     dp[i][j] = Math.min(1+dp[i][j-v], dp[i-1][j]);
//                 }else{ 
//                     dp[i][j] = dp[i-1][j];
//                 }
//             }
//         }
//         return dp[n][sum];
//     }
// }

