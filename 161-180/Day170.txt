1) 2092. Find All People With Secret - hard
class pair{
    int node;
    int time;
    pair(int a,int b){
        node=a;
        time=b;
    }
}
class Solution {
    public List<Integer> findAllPeople(int n, int[][] meetings, int firstper) {
        ArrayList<ArrayList<pair>>adj=new ArrayList<>();
        for(int i=0;i<n;i++){
            adj.add(new ArrayList<>());
        }
        for(int i=0;i<meetings.length;i++){
            int st=meetings[i][0];
            int dst=meetings[i][1];
            int time=meetings[i][2];
            adj.get(st).add(new pair(dst,time));
            adj.get(dst).add(new pair(st,time));
        }
        adj.get(0).add(new pair(firstper,0));
        Set<Integer>st=new HashSet<>();
        PriorityQueue<pair>q=new PriorityQueue<>((a,b)->a.time-b.time);
        q.add(new pair(0,0));
        while(q.size()>0){
            pair temp=q.poll();
            int currnode=temp.node;
            int currtime=temp.time;
            if(st.contains(currnode))continue;
            st.add(currnode);
            for(pair it:adj.get(currnode)){
                int adjnode=it.node;
                int adjtime=it.time;
                if(currtime<=adjtime && !st.contains(adjnode)){
                    q.add(new pair(adjnode,adjtime));
                }
            }
        }
        List<Integer>ls=new ArrayList<>();
        for(int it:st){
            ls.add(it);
        }
        return ls;
    }
}