1) 739. Daily Temperatures - medium
class Solution {
    public int[] dailyTemperatures(int[] temps) {
        int l = temps.length;
        int arr[] = new int[l];
        Stack<Integer> s = new Stack<>();
        for(int i=0;i<l;i++){
            while(!s.isEmpty() && temps[i]>temps[s.peek()]){
                arr[s.peek()] = i - s.pop();
            }
            s.push(i);
        }
        return arr;
    }
}

2) 201. Bitwise AND of Numbers Range - medium
class Solution {
    //think about why it works 
    public int rangeBitwiseAnd(int left, int right) {
        int shifts = 0;
        while(left<right){
            left >>= 1;
            right >>= 1;
            shifts++;
        }
        return left<<shifts;
    }
}

3) 138. Copy List with Random Pointer - medium
//iterative Solution
public class Solution {
    public Node copyRandomList(Node head) {
        if (head == null) return null;
        
        HashMap<Node, Node> oldToNew = new HashMap<>();
        
        Node curr = head;
        while (curr != null) {
            oldToNew.put(curr, new Node(curr.val));
            curr = curr.next;
        }
        
        curr = head;
        while (curr != null) {
            oldToNew.get(curr).next = oldToNew.get(curr.next);
            oldToNew.get(curr).random = oldToNew.get(curr.random);
            curr = curr.next;
        }
        
        return oldToNew.get(head);
    }
}

//recursive Solution
class Solution {
    public static Node recSoln(HashMap<Node, Node> hm, Node head){
        if(head==null){
            return null;
        }
        if(hm.containsKey(head)){
            return hm.get(head);
        }

        Node temp = new Node(head.val);
        hm.put(head, temp);

        temp.next = recSoln(hm, head.next);
        temp.random = recSoln(hm, head.random);
        return temp;
    }

    public Node copyRandomList(Node head) {
        HashMap<Node, Node> hm = new HashMap<>();
        return recSoln(hm, head);
    }
}