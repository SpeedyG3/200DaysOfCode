1) 739. Daily Temperatures - medium
class Solution {
    public int[] dailyTemperatures(int[] temps) {
        int l = temps.length;
        int arr[] = new int[l];
        Stack<Integer> s = new Stack<>();
        for(int i=0;i<l;i++){
            while(!s.isEmpty() && temps[i]>temps[s.peek()]){
                arr[s.peek()] = i - s.pop();
            }
            s.push(i);
        }
        return arr;
    }
}

2) 201. Bitwise AND of Numbers Range - medium
class Solution {
    //think about why it works 
    public int rangeBitwiseAnd(int left, int right) {
        int shifts = 0;
        while(left<right){
            left >>= 1;
            right >>= 1;
            shifts++;
        }
        return left<<shifts;
    }
}

3) 138. Copy List with Random Pointer - medium
//iterative Solution
public class Solution {
    public Node copyRandomList(Node head) {
        if (head == null) return null;
        
        HashMap<Node, Node> oldToNew = new HashMap<>();
        
        Node curr = head;
        while (curr != null) {
            oldToNew.put(curr, new Node(curr.val));
            curr = curr.next;
        }
        
        curr = head;
        while (curr != null) {
            oldToNew.get(curr).next = oldToNew.get(curr.next);
            oldToNew.get(curr).random = oldToNew.get(curr.random);
            curr = curr.next;
        }
        
        return oldToNew.get(head);
    }
}

//recursive Solution
class Solution {
    public static Node recSoln(HashMap<Node, Node> hm, Node head){
        if(head==null){
            return null;
        }
        if(hm.containsKey(head)){
            return hm.get(head);
        }

        Node temp = new Node(head.val);
        hm.put(head, temp);

        temp.next = recSoln(hm, head.next);
        temp.random = recSoln(hm, head.random);
        return temp;
    }

    public Node copyRandomList(Node head) {
        HashMap<Node, Node> hm = new HashMap<>();
        return recSoln(hm, head);
    }
}

4) 445. Add Two Numbers II - medium
class Solution {
    public static ListNode reverse(ListNode head){
        if(head.next==null || head==null){
            return head;
        }
        ListNode prev = null;
        ListNode curr = head;
        ListNode nextNode;
        while(curr!=null)
        {
            nextNode = curr.next;
            curr.next = prev;
            prev = curr;
            curr = nextNode;
        }
        return prev;
    }

    public static ListNode addFirst(ListNode head, int val){
        if(head==null){
            return new ListNode(val);
        }else{
            return new ListNode(val, head);
        }
    }

    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        l1 = reverse(l1);
        l2 = reverse(l2);
        int carry = 0;
        ListNode head = null;
        while(l1!=null || l2!=null){
            int sum=0;
            if(l1!=null){
                sum+=l1.val;
            }
            if(l2!=null){
                sum+=l2.val;
            }
            sum+=carry;
            carry = 0;
            if(sum>=10){
                carry=sum/10;
                sum=sum%10;
            }
            
            head = addFirst(head, sum);
            if(l1!=null){
                l1=l1.next;
            }
            if(l2!=null){
                l2=l2.next;
            }
        }
        if(carry!=0){
            head = addFirst(head, carry);
        }
        return head;
    }
}

//other soln which is nice but worse TC

import java.math.BigInteger;
class Solution {
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        
        StringBuilder sb1 = new StringBuilder();
        StringBuilder sb2 = new StringBuilder();

        while (l1 != null){
            sb1.append(l1.val);
            l1 = l1.next;
        }

        while (l2 != null){
            sb2.append(l2.val);
            l2 = l2.next;
        }

        BigInteger big1 = new BigInteger(sb1.toString());
        BigInteger big2 = new BigInteger(sb2.toString());
        big1 = big1.add(big2);

        String s = big1+"";

        ListNode step = new ListNode();
        ListNode res = step;
        
        for (int i = 0; i < s.length(); i++){
            step.next = new ListNode(s.charAt(i) - 48);
            step = step.next;             
        }

        return res.next;
    }
}

5) 25. Reverse Nodes in k-Group - hard
class Solution {
    public static ListNode getKth(ListNode head, int k){
        while(head!=null && k>0){
            head = head.next;
            k--;
        }
        return head;
    }

    public ListNode reverseKGroup(ListNode head, int k) {
        if(head==null || k==1){
            return head;
        }
        ListNode dummy = new ListNode(-1, head);
        ListNode groupPrev = dummy;
        while(true){
            ListNode kth = getKth(groupPrev, k);
            if(kth==null){
                break;
            }
            ListNode groupNext = kth.next;
            //reverse
            //connecting the curr to group next so take prev as kth next
            ListNode prev = kth.next;
            ListNode curr = groupPrev.next;
            ListNode nextNode;
            while(curr!=groupNext){
                nextNode = curr.next;
                curr.next = prev;
                prev = curr;
                curr = nextNode;
            }
            ListNode tmp = groupPrev.next;
            groupPrev.next = kth;
            groupPrev = tmp;
        }
        return dummy.next;

    }
}

6) 61. Rotate List - medium
class Solution {
    public ListNode rotateRight(ListNode head, int k) {
        if (head == null || head.next == null) {
            return head;
        }

        ListNode temp = head;
        int size = 1;
        while (temp.next != null) {
            temp = temp.next;
            size++;
        }
        temp.next = head;

        k = size - (k%size);
        temp = head;
        int i = 1;
        while(i<k){
            temp = temp.next;
            i++;
        }

        head = temp.next;
        temp.next = null;
        return head;
    }
}

7) 901. Online Stock Span - medium
//reference
// https://leetcode.com/problems/online-stock-span/solutions/3850945/simple-java-solution-o-n-solution-beats-100/
//was done in sem6 sts too
class Pair{
    //class to store
    int price;
    int span;   

    public Pair(int p, int s){
        this.price = p;
        this.span = s;
    }
}

class StockSpanner {
    Stack<Pair> s;
    public StockSpanner() {
        s = new Stack<>();
    }
    
    public int next(int price) {
        int span = 1;
        //For every new price, if the top element in the stack is smaller or
        //equal to the given price then add the top element count + it's own count
        //Keep on doing it untill st.peek() > price
        while(!s.isEmpty() && s.peek().price<=price){
            span+=s.peek().span;
            s.pop();
        }
        s.push(new Pair(price, span));
        return span;
    }
}

/**
 * Your StockSpanner object will be instantiated and called as such:
 * StockSpanner obj = new StockSpanner();
 * int param_1 = obj.next(price);
 */