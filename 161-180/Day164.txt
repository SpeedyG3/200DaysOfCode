1) 5. Longest Palindromic Substring - medium 
//a bit better than brute Solution
class Solution { 
    public String longestPalindrome(String s) {
        String res = "";
        int resLen = 0;
        int n = s.length();
        //odd lengthed
        for(int i=0;i<n;i++){
            int l = i;
            int r = i;
            while(l>=0 && r<n && s.charAt(l)==s.charAt(r)){
                if(r-l+1>resLen){
                    resLen = r-l+1;
                    res = s.substring(l, r+1);
                }
                l--;
                r++;
            }
        }
        //even length
        for(int i=0;i<n;i++){
            int l = i;
            int r = i+1;
            while(l>=0 && r<n && s.charAt(l)==s.charAt(r)){
                if(r-l+1>resLen){
                    resLen = r-l+1;
                    res = s.substring(l, r+1);
                }
                l--;
                r++;
            }
        }
        return res;
    }
}

2) striver sheet
//reverse a DLL
import java.util.*;
public class Test{
    public static class Node{
        int val;
        Node next;
        Node prev; 

        public Node(int v){
            this.val = v;
            this.next = null;
            this.prev = null;
        }
    }

    public static Node addLast(Node head, int v){
        Node newNode = new Node(v);
        if(head==null){
            return newNode;
        }else{
            Node temp = head;
            while(temp.next!=null){
                temp = temp.next;
            }
            temp.next = newNode;
            newNode.prev = temp;
            return head;
        }
    }

    public static void printer(Node head){
        Node temp = head;
        while(temp!=null){
            System.out.print(temp.val+" ");
            temp = temp.next;
        }
        System.out.println();
    }

    public static Node reverse(Node head){
        Node prev = null;
        Node curr = head;

        while(curr!=null){
            Node nextNode = curr.next;
            curr.next = prev;
            curr.prev = nextNode;
            prev = curr;
            curr = nextNode;
        }
        return prev;
    }

    public static void main(String args[]){
        Test ll = new Test();
        Node head = null;
        int arr[] = {1,3,5,7,29,11,63,12};
        for(int i=0;i<arr.length;i++){
            head = addLast(head, arr[i]);
        }
        printer(head);
        head = reverse(head);
        printer(head);
    }
}

//just for refernce reverse in a singly linked list 
Node curr = head;
Node nextNode;
Node prev = null;
while(curr!=null){
    nextNode = curr.next;
    curr.next = prev;
    prev = curr;
    curr = nextNode;
}

//recursively reverse
public Node recursivelyRev(Node head){
    if(head == null || head.next==null){
        return head;
    }

    Node newHead = recursivelyRev(head.next);
    head.next.next = head //connection reverse
    head.next = null;
    return newHead;
}

3) 142. Linked List Cycle II - medium 
public class Solution {
    public ListNode detectCycle(ListNode head) {
        ListNode slow = head;
        ListNode fast = head;
        while(fast!=null && fast.next!=null){
            fast = fast.next.next;
            slow = slow.next;
            if(slow==fast){
                break;
            }
        }
        if(fast==null || fast.next==null){
            return null;
        }

        fast = head;
        while(fast!=slow){
            fast = fast.next;
            slow = slow.next;
        }
        return slow;
    }
}

//reviewed isPalindromic linked list and remove nth node from back of LL 

4) 2095. Delete the Middle Node of a Linked List - medium
class Solution {
    public ListNode deleteMiddle(ListNode head) {
        if(head.next==null)
        {
            return null;
        }
        ListNode slow = head;
        ListNode fast = head;
        ListNode prev = null;
        while(fast!=null && fast.next!=null)
        {
            prev = slow;
            slow = slow.next;
            fast = fast.next.next;
        }
        prev.next = slow.next;
        return head;         
    }
}

5) 912. Sort an Array
//regular merge sort in a different way
class Solution {
    public int[] sortArray(int[] nums) {
        mergeSort(nums,0,nums.length-1);
        return nums;
    }
    public static void mergeFun(int[] arr, int l, int m, int r) {
        int n1 = m + 1 - l;
        int n2 = r - m;
        int[] left = new int[n1];
        for (int i = 0; i < n1; i++) {
            left[i] = arr[l + i];
        }
        int[] right = new int[n2];
        for (int i = 0; i < n2; i++) {
            right[i] = arr[m + 1 + i];
        }
        int i = 0, j = 0, k = l;
        while (i < n1 || j < n2) {
            if (j == n2 || i < n1 && left[i] < right[j])
                arr[k++] = left[i++];
            else
                arr[k++] = right[j++];
        }
    }

    public static void mergeSort(int[] arr, int low, int high) {
        if (low < high) {
            int middle = (high - low) / 2 + low;
            mergeSort(arr, low, middle);
            mergeSort(arr, middle + 1, high);
            mergeFun(arr, low, middle, high);
        }
    }
}

6) 2402. Meeting Rooms III - hard
//didn't solve but submitted -> check how to do 
class Solution {
    public int mostBooked(int n, int[][] meetings) {
        Arrays.sort(meetings, (a, b) -> a[0] - b[0]);

        PriorityQueue<int[]> pq = new PriorityQueue<>((a,b)-> (a[1] == b[1]) ? a[0] - b[0] : a[1] - b[1]);
        PriorityQueue<Integer> freeroom = new PriorityQueue<>();

        for(int i = 0;i < n;i++){
            freeroom.offer(i);
        }

        int[] res = new int[n];

        for(int i = 0;i < meetings.length;i++){
            while(!pq.isEmpty() && pq.peek()[1] <= meetings[i][0]){
                freeroom.offer(pq.poll()[0]);
            }

            if(freeroom.isEmpty()){
                int[] room = pq.poll();
                res[room[0]]++;
                pq.offer(new int[]{room[0], room[1] + meetings[i][1] - meetings[i][0]});
            }
            else{
                int room = freeroom.poll();
                res[room]++;
                pq.offer(new int[]{room,meetings[i][1]});
            }
        }

        int mx = Integer.MIN_VALUE , ans = 0;

        for(int i = 0;i < n;i++){
            if(res[i] > mx){
                mx = res[i];
                ans = i;
            }
        }

        return ans;
    }
}