1) Sort a stack using recursion 
//striver sheet coding ninjas
import java.util.* ;
import java.io.*; 
public class Solution {
	public static Stack<Integer> sortStack(Stack<Integer> s) {
		//Write your code here
		if(s.isEmpty()){
			return s;
		}

		int popped = s.pop();
		sortStack(s);
		pushSorted(popped, s);
		return s;
	}

	public static void pushSorted(int num, Stack<Integer> s){
		if(s.isEmpty() || s.peek()<=num){
			s.push(num);
			return;
		}

		int popped = s.pop();
		pushSorted(num, s);
		s.push(popped);
	}
}

2) Reverse a stack using recursion
//striver sheet coding ninjas
import java.util.Stack;

public class Solution {
    
	public static void reverseStack(Stack<Integer> stack) {
		// write your code here
		if(stack.isEmpty()){
			return;
		}
		int popped = stack.pop();
		reverseStack(stack);
		pushBottom(popped, stack);
	}

	public static void pushBottom(int num, Stack<Integer> s){
		if(s.isEmpty()){
			s.push(num);
			return;
		}

		int popped = s.pop();
		pushBottom(num, s);
		s.add(popped);
	}
}

3) 22. Generate Parentheses - medium 
class Solution {
    public static List<String> recSoln(String s, int open, int close, List<String> ans){
        if(open==0 && close==0){
            ans.add(s);
            return ans;
        }

        if(open>0){
            recSoln(s+'(', open-1, close, ans);
        }
        //can close only when we have opens
        if(open<close){
            recSoln(s+')', open, close-1, ans);
        }
        //dummy return 
        return ans;
    }

    public List<String> generateParenthesis(int n) {
        List<String> ans = new ArrayList<>();
        if(n==1){
            ans.add("()");
        }else{
            //n n indicate opens and closes left 
            ans = recSoln("", n, n, ans);
        }
        return ans;
    }
}

4) Generate all binary strings
//striver sheet coding ninjas
class Solution{
	public static void recSoln(List<String> ans, int i, int N, String s){
        if(i==N){
            ans.add(s.toString());
            return;
        }

        if(i==0){
            recSoln(ans, i+1, N, s+"1");
            recSoln(ans, i+1, N, s+"0");
        }else{
            char prev = s.charAt(i-1);
            if(prev!='1'){
                recSoln(ans, i+1, N, s+"1");
            }
            recSoln(ans, i+1, N, s+"0");
        }
    }

    public static List<String> generateString(int N){
        List<String> ans = new ArrayList<>();
        recSoln(ans, 0, N, new String(""));
        return ans;
    }
}

5) 78. Subsets - medium
class Solution {
    public static List<List<Integer>> recSoln(int i, int nums[], List<List<Integer>> ans, List<Integer> sub){
        if(i == nums.length){
            ans.add(new ArrayList<>(sub));
            return ans;
        }

        //take nothing 
        recSoln(i+1, nums, ans, sub);
        
        //take ele at index i
        List<Integer> subWithNum = new ArrayList<>(sub);
        subWithNum.add(nums[i]);
        recSoln(i+1, nums, ans, subWithNum);

        return ans;
    }

    public List<List<Integer>> subsets(int[] nums) {
        List<List<Integer>> ans = new ArrayList<>();
        ans = recSoln(0, nums, ans, new ArrayList<Integer>());
        return ans; 
    }
}

6) 
class Solution {
    public static String moreSubsequence(int n, int m, String a, String b){
		
	}
}
