1) 231. Power of Two - easy 
class Solution {
    public boolean isPowerOfTwo(int n) {
        if((Math.log10(n) / Math.log10(2))%1==0){
            return true;
        }else{
            return false;
        }
        
    }
}

2) 155. Min Stack - medium
class MinStack {
    Stack<Integer> s;
    Stack<Integer> min;
    public MinStack() {
        s = new Stack<>();
        min = new Stack<>();
    }
    
    public void push(int val) {
        s.push(val);
        if(min.isEmpty() || val<=min.peek()){
            min.push(val);
        }
    }
    
    public void pop() {
        int popped = s.pop();
        if(min.peek()==popped){
            min.pop();
        }
    }
    
    public int top() {
        if(!s.isEmpty()){
            return s.peek();
        }
        return -1;
    }
    
    public int getMin() {
        if(!min.isEmpty()){
            return min.peek();
        }
        return -1;
    }
}


3) 3039. Apply Operations to Make String Empty - medium
//worse soln
class Solution {
    public String lastNonEmptyString(String s) {
        int freq[] = new int[26];
        int l = s.length();
        int max = 0;
        for(int i=0;i<l;i++){
            char c = s.charAt(i);
            freq[c-'a']++;
            max = Math.max(freq[c-'a'], max);
        }

        StringBuilder sb = new StringBuilder("");
        Set<Character> set = new HashSet<>();
        for(int i=s.length()-1;i>=0;i--){
            char c = s.charAt(i);
            if(freq[c-'a']==max && (!set.contains(c))){
                sb.insert(0, c+"");
            }
            set.add(c);
        }
        return sb.toString();
    }
}

//even worse
class Solution {
    public String lastNonEmptyString(String s) {
        HashMap<Character, Integer> hm = new HashMap<>();
        int max = 0;
        int l = s.length();
        for (int i=0;i<l;i++) {
            char c = s.charAt(i);
            hm.put(c, hm.getOrDefault(c, 0) + 1);
            max = Math.max(hm.get(c), max);
        }

        StringBuilder sb = new StringBuilder();
        for(int i=l-1;i>=0;i--){
            char c = s.charAt(i);
            if(hm.get(c)==max && sb.indexOf(String.valueOf(c))==-1){
                sb.insert(0, c);
            }
        }
        return sb.toString();
    }
}

4) 3042. Count Prefix and Suffix Pairs I - easy
class Solution {
    public int countPrefixSuffixPairs(String[] words) {
        int l = words.length;
        int ans = 0;
        for (int i = 0; i < l; i++) {
            for (int j = i+1; j < l; j++) {
                if (i != j && isPrefixSuffix(words[i], words[j])) {
                    ans++;
                }
            }
        }
        return ans;
    }

    public static boolean isPrefixSuffix(String a, String b) {
        int al = a.length();
        int bl = b.length();
        if (bl < al) {
            return false;
        }
        String f = b.substring(0, al);
        String r = b.substring(bl - al);
        return f.equals(a) && r.equals(a);
    }
}
//can use startwith and endswith functions for ease

5) 3043. Find the Length of the Longest Common Prefix - medium
//smart ass solution 
// https://leetcode.com/problems/find-the-length-of-the-longest-common-prefix/solutions/4746307/java-c-simplest-approach-using-sets-accepted/
class Solution {
    public int longestCommonPrefix(int[] arr1, int[] arr2) {
        HashSet<Integer> prefixSet = new HashSet<>();
        for(int i : arr1) {
            //storing all => for 123 -> [1,12,123]
            while(i > 0) {
                prefixSet.add(i);
                i /= 10;
            }
        }

        int len = 0;
        //for arr2
        for(int i: arr2){
            while(i>0){
                if(prefixSet.contains(i)){
                    len = Math.max(len, String.valueOf(i).length());
                }
                i=i/10;
            }
        }
        return len;
    }
}