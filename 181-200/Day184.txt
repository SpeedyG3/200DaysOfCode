1) 78. Subsets - medium
class Solution {
    public static void recSoln(int i, int nums[], List<List<Integer>> ans, List<Integer> sub){
        if(i==nums.length){
            ans.add(new ArrayList(sub));
            return;
        }

        //pick and not pick
        //pick
        sub.add(nums[i]);
        recSoln(i+1, nums, ans, sub);

        sub.remove(sub.size()-1);
        recSoln(i+1, nums, ans, sub);
    }

    public List<List<Integer>> subsets(int[] nums) {
        List<List<Integer>> ans = new ArrayList<>();
        recSoln(0, nums, ans, new ArrayList<>());
        return ans;
    }
}

2) Sum of subsets - coding ninjas - striver 
import java.util.* ;
import java.io.*; 
public class Solution {
    public static void recSoln(int i, int num[], ArrayList<Integer> sums, int currSum){
        if(i==num.length){
            sums.add(currSum);
            return;
        }

        //pick 
        recSoln(i+1, num, sums, currSum+num[i]);
        
        //not pick
        recSoln(i+1, num, sums, currSum);        
    }
    public static ArrayList<Integer> subsetSum(int num[]) {
        // Write your code here..
        ArrayList<Integer> sums = new ArrayList<>();
        recSoln(0, num, sums, 0);
        Collections.sort(sums);
        return sums;
    }
}

3) 90. Subsets II - medium

4) 349. Intersection of Two Arrays - easy
class Solution {
    public int[] intersection(int[] nums1, int[] nums2) {
        HashSet<Integer> set1 = new HashSet<>();
        for(int i: nums1){
            set1.add(i);
        }

        ArrayList<Integer> ans = new ArrayList<>();
        for(int i=0;i<nums2.length;i++){
            if(set1.contains(nums2[i])){
                ans.add(nums2[i]);
                set1.remove(nums2[i]);
            }
        }

        int l = ans.size();
        int arr[] = new int[l];
        for(int i=0;i<l;i++){
            arr[i] = ans.get(i);
        }
        return arr;        
    }
}

5) 
class Solution {
    public static void recSoln(int ind, int arr[], int t, List<List<Integer>> ans, List<Integer> list){    
        if(t==0){
            ans.add(new ArrayList<>(list));
            return;
        }
        
        for(int i=ind;i<arr.length;i++){
            if(i>ind && arr[i]==arr[i-1]){
                continue;
            }
            if(arr[i]>t){
                break;
            }

            list.add(arr[i]);
            recSoln(i+1, arr, t-arr[i], ans, list);
            list.remove(list.size()-1);
        }
    }
    public List<List<Integer>> combinationSum2(int[] candidates, int target) {
        Arrays.sort(candidates);
        List<List<Integer>> ans = new ArrayList<>();
        recSoln(0, candidates, target, ans, new ArrayList<>());
        return ans;   
    }
}