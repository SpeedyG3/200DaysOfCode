1) 1361. Validate Binary Tree Nodes - medium 
class Solution {
    public boolean validateBinaryTreeNodes(int n, int[] leftChild, int[] rightChild) {
        boolean[] visited = new boolean[n];
        Deque<Integer> dq = new ArrayDeque<>();
        int[] indegree = new int[n];
        for(int i = 0; i < n; i++){
            if(leftChild[i] != -1){
                indegree[leftChild[i]]++;
            }
            if(rightChild[i] != -1){
                indegree[rightChild[i]]++;
            }
        }
        for(int i = 0; i < n; i++){
            if(indegree[i] == 0){
                dq.addLast(i);
            } else if(indegree[i] > 1){
                return false;
            }
        }
        if(dq.isEmpty() || dq.size() > 1){
            return false;
        }
        while(!dq.isEmpty()){
            int curr = dq.pollFirst();
            if(visited[curr]){
                return false;
            }
            visited[curr] = true;
            if(leftChild[curr] != -1){
                indegree[leftChild[curr]]--;
                if(!visited[leftChild[curr]] && indegree[leftChild[curr]] == 0){
                    dq.addLast(leftChild[curr]);
                }
            }
            if(rightChild[curr] != -1){
                // if(visited[rightChild[curr]]){
                //     return false;
                // }
                indegree[rightChild[curr]]--;
                if(!visited[rightChild[curr]] && indegree[rightChild[curr]] == 0){
                    dq.addLast(rightChild[curr]);
                }
            }
        }
        for(int i = 0; i < n; i++){
            if(!visited[i]){
                return false;
            }
        }
        return true;
    }
}

2) 21. Merge Two Sorted Lists - easy 
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode mergeTwoLists(ListNode list1, ListNode list2) {
        ListNode mergedHead = new ListNode(-1);
        ListNode temp = mergedHead;
        while(list1!=null && list2!=null)
        {
            if(list1.val<=list2.val)
            {
                temp.next=list1;
                list1=list1.next;
                temp=temp.next;
            }
            else{
                temp.next=list2;
                list2=list2.next;
                temp=temp.next;
            }
        }

        while(list1!=null)
        {
            temp.next=list1;
            temp=temp.next;
            list1=list1.next;
        }
        while(list2!=null)
        {
            temp.next=list2;
            temp=temp.next;
            list2=list2.next;
        }
        mergedHead = mergedHead.next;
        return mergedHead;
    }
}

3) 24. Swap Nodes in Pairs - medium
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode swapPairs(ListNode head) {
        if(head==null || head.next==null){
            return head;
        }
        ListNode a = head;
        ListNode b = head.next;
        int temp = 0;
        while(a!=null && b!=null){
            temp = a.val;
            a.val = b.val;
            b.val = temp;
            if(a!=null && a.next!=null){
                a=a.next.next;
            }else{
                break;
            }
            if(b!=null && b.next!=null){
                b=b.next.next;
            }else{
                break;
            }
        }
        return head;
    }
}

4) 61. Rotate List - medium 
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode rotateRight(ListNode head, int k) {
        if(head==null || head.next==null){
            return head;
        }
        ListNode temp = head;
        int size=1;
        while(temp.next!=null){
            size++;
            temp=temp.next;
        }
        temp.next=head;
        if(k>=size){
            k%=size;
        }
        k = size-k;//forward moving head by these positions
        int m = 0;
        while(m<k){
            temp = head;
            head = head.next;
            m++;
        }
        temp.next = null;
        return head;
    }
}

5) 86. Partition List - medium
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */

 //kindof bad solution idk why
class Solution {
    public static ListNode addLast(ListNode head, int v){
        ListNode newNode = new ListNode(v);
        if(head==null){
            return newNode;
        }
        ListNode temp = head;
        while(temp.next!=null){
            temp=temp.next;
        }
        temp.next=newNode;
        return head;
    }

    public ListNode partition(ListNode head, int x) {
        if(head==null || head.next==null){
            return head;
        }
        ListNode left = null;
        ListNode right = null;
        while(head!=null){
            int v = head.val;
            if(v<x){
                left = addLast(left, v);
            }else{
                right = addLast(right, v);
            }
            head=head.next;
        }
        if(left==null){
            return right;
        }
        head = left;
        while(left.next!=null){
            left=left.next;
        }
        left.next = right;
        return head;
    }
}

//better soln 
class Solution {
    public ListNode partition(ListNode head, int x) {
        if(head==null || head.next==null){
            return head;
        }
        ListNode ans = null;
        ListNode temp = head;
        ListNode prev = null;
        int v = Integer.MIN_VALUE;
        while(temp!=null){
            v = temp.val;
            if(prev==null && v<x){
                ans = new ListNode(v);
                prev=ans;
            }else if(prev!=null && v<x){
                prev.next = new ListNode(v);
                prev=prev.next;
            }
            temp=temp.next;
        }
        temp = head;
        while(temp!=null){
            v = temp.val;
            if(prev==null && v>=x){
                ans = new ListNode(v);
                prev=ans;
            }else if(prev!=null && v>=x){
                prev.next = new ListNode(v);
                prev=prev.next;
            }
            temp=temp.next;
        }
        return ans;
    }
}

6) 23. Merge k Sorted Lists - hard
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public static ListNode mergeTwoLists(ListNode list1, ListNode list2) {
        ListNode mergedHead = new ListNode(-1);
        ListNode temp = mergedHead;
        while(list1!=null && list2!=null)
        {
            if(list1.val<=list2.val)
            {
                temp.next=list1;
                list1=list1.next;
                temp=temp.next;
            }
            else{
                temp.next=list2;
                list2=list2.next;
                temp=temp.next;
            }
        }

        while(list1!=null)
        {
            temp.next=list1;
            temp=temp.next;
            list1=list1.next;
        }
        while(list2!=null)
        {
            temp.next=list2;
            temp=temp.next;
            list2=list2.next;
        }
        mergedHead = mergedHead.next;
        return mergedHead;
    }

    public ListNode mergeKLists(ListNode[] lists) {
        if(lists.length == 0 || lists == null) {
            return null;
        }

        int interval = 1;
        while (interval < lists.length) {
            for (int i = 0; i < lists.length - interval; i += interval * 2) {
                lists[i] = mergeTwoLists(lists[i], lists[i + interval]);
            }
            interval *= 2;
        }
        return lists[0];
    }
}