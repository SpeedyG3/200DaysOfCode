//Doing problems from last 10 days again as I have not done them properly due 
//to my NPTEL - entrepreneurship exam

1) 341. Flatten Nested List Iterator - medium 
public class NestedIterator implements Iterator<Integer> {
    private List<Integer> flattened;
    private int index;

    public NestedIterator(List<NestedInteger> nestedList) {
        flattened = new ArrayList<>();
        index = 0;
        flattened = flatten(nestedList);
    }

    private List<Integer> flatten(List<NestedInteger> list){
        List<Integer> res = new ArrayList<>();
        for(NestedInteger ni : list){
            if(ni.isInteger()){
                res.add(ni.getInteger());
            }else{
                res.addAll(flatten(ni.getList()));
            }
        }
        return res;
    }

    @Override
    public Integer next() {
        return flattened.get(index++);
    }

    @Override
    public boolean hasNext() {
        return index < flattened.size();
    }
}

2) 1793. Maximum Score of a Good Subarray - hard
class Solution {
    public int maximumScore(int[] nums, int k) {
        int l = k;
        int r = k;
        int n = nums.length;
        int cur_min = nums[k];
        int res = -1;
        while(l>0 || r<n-1){
            int left = 0;
            int right = 0;
            if(l>0){
                left = nums[l-1];
            }
            if(r<n-1){
                right = nums[r+1];
            }

            if(left>right){
                l-=1;
                cur_min = Math.min(cur_min, left);
            }else{
                r+=1;
                cur_min = Math.min(cur_min, right);
            }
            res = Math.max(res, cur_min*(r-l+1));
        }
        if(res!=-1){
            return res;
        }
        return nums[k];
    }
}

3)779. K-th Symbol in Grammar - medium 
class Solution {
    public int kthGrammar(int n, int k) {
        int curr = 0;
        int l = 1;
        int r = (int)Math.pow(2, n-1);

        for(int i=1; i<=n-1; i++){
            int mid = (l + r) / 2;
            if(k <= mid){
                r = mid;
            } else {
                l = mid + 1;
                curr = curr==0?1:0;
            }
        }
        return curr;
    }
}
