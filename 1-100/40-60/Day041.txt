1) 1269. Number of Ways to Stay in the Same Place After Some Steps - hard
//recursion 
class Solution {
    public static int rec(int pos, int moves, int steps, int arrLen){
        if(moves==steps){
            if(pos==1){
                return 1;
            }else{
                return 0;
            }
        }
        if(pos==1){
            return rec(pos, moves+1, steps, arrLen)+rec(pos+1, moves+1, steps, arrLen);
        }else if(pos==arrLen){
            return rec(pos, moves+1, steps, arrLen)+rec(pos-1, moves+1, steps, arrLen);
        }else{
            return rec(pos, moves+1, steps, arrLen)+rec(pos-1, moves+1, steps, arrLen)
            +rec(pos+1, moves+1, steps, arrLen);
        }
        
    }

    public int numWays(int steps, int arrLen) {
        return rec(1, 0, steps, arrLen);
    }
}

//memoisation 
class Solution {
    private static final int MOD = (int) 1e9 + 7;
    public static long rec(int pos, int steps, int arrLen, long[][] dp) {
        if (pos > arrLen || pos < 1) {
            return 0;
        }
        if (steps == 0) {
            return pos==1?1:0;
        }
        if (dp[steps][pos] != -1) {
            return dp[steps][pos];
        } else {
            return dp[steps][pos] = rec(pos, steps - 1, arrLen, dp)
                             + rec(pos - 1, steps - 1, arrLen, dp) 
                             + rec(pos + 1, steps - 1, arrLen, dp)% MOD;
        }
    }

    public int numWays(int steps, int arrLen) {
        long[][] dp = new long[steps + 1][arrLen + 1];
        for (long[] row : dp) {
            Arrays.fill(row, -1);
        }
        return (int) rec(1, steps, arrLen, dp);
    }
}
//TLE idk why it is perfect

//working memoisation
class Solution {
    int m = 1000000007;
    
    public int numWays(int steps, int arrLen) {
        int[][] dp = new int[steps + 1][steps + 1];
        for (int[] arr : dp) Arrays.fill(arr, -1);
        return helper(arrLen, dp, 0, steps) % m;
    }

    public int helper(int arrLen, int[][] dp, int currPos, int steps) {
        if (steps == 0 && currPos == 0) return 1;
        if (steps == 0 && currPos != 0) return 0;

        if (dp[currPos][steps] != -1) return dp[currPos][steps];

        long stay = helper(arrLen, dp, currPos, steps - 1);
        long left = 0;
        long right = 0;
        if (currPos > 0) left = helper(arrLen, dp, currPos - 1, steps - 1);
        if (currPos < arrLen - 1) right = helper(arrLen, dp, currPos + 1, steps - 1);
        return dp[currPos][steps] = (int)((stay + left + right) % m);
    }
}   