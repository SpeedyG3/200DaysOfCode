1) House Robber - medium 

//recursion
class Solution {
    public static int robHelper(int nums[], int ind){
        if(ind==0){
            return nums[0];
        }else if(ind<0){
            return 0;
        }
        //steal , not steal cases
        return Math.max(0 + robHelper(nums, ind-1), nums[ind]+robHelper(nums, ind-2));
    }

    public int rob(int[] nums) {
        int index = nums.length-1;
        return robHelper(nums, index);
    }
}

//memoization
class Solution {
    public static int robHelper(int nums[], int dp[], int ind){
        if(ind==0){
            return nums[0];
        }else if(ind<0){
            return 0;
        }
        if(dp[ind]!=-1){
            return dp[ind];
        }
        //steal , not steal cases
        return dp[ind] = Math.max(0 + robHelper(nums, dp, ind-1), nums[ind]+robHelper(nums, dp, ind-2));
    }

    public int rob(int[] nums) {
        int index = nums.length-1;
        int dp[] = new int[index+1];
        Arrays.fill(dp, -1);
        return robHelper(nums, dp, index);
    }
}

// tabulation
class Solution {
    public static int robHelper(int nums[]){
        int n = nums.length;
        int dp[] = new int[n+1];
        //dp[i] contains the max profit if we had upto i+1th house...0 -> ith house i+1th
        //not calc init dp[] = -1
        Arrays.fill(dp, -1);
        dp[0] = 0;
        dp[1] = nums[0];
        for(int i=2;i<=n;i++){
            dp[i] = Math.max(dp[i-1], dp[i-2]+nums[i-1]);
        }
        return dp[n];
    }

    public int rob(int[] nums) {
        int n = nums.length;
        return robHelper(nums);
    }
}