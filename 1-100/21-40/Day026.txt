1) Best to Buy and sell stocks 2 - medium 
//recusion solution gives TLE on leetcode
class Solution {
    public static int maxProfitRecursion(int ind, int buy, int prices[], int n){
        if(ind==n) return 0;
        int profit=0;
        if(buy==1){
            profit += Math.max(-prices[ind] + maxProfitRecursion(ind+1, 0, prices, n),
             0 + maxProfitRecursion(ind+1, 1, prices, n));
        }else{
            profit += Math.max(prices[ind] + maxProfitRecursion(ind+1, 1, prices, n),
             0 + maxProfitRecursion(ind+1, 0, prices, n));
        }
        return profit;
    }

    public int maxProfit(int[] prices) {
        int n = prices.length;
        // the params for the fn->ind, buy, prices array, size of prices array
        return maxProfitRecursion(0, 1, prices, n); //buy==1 => can buy, buy==0 => cannot buy
    }
}

//memoisation also bad but submits on leetcode
class Solution {
    public static int maxProfitRecursion(int ind, int buy, int prices[], int n, int dp[][]){
        if(ind==n){
            return 0;
        }
        if(dp[ind][buy]!=-1){
            return dp[ind][buy];
        } 
        
        int profit=0;
        if(buy==1){
            profit += Math.max(-prices[ind] + maxProfitRecursion(ind+1, 0, prices, n, dp),
             0 + maxProfitRecursion(ind+1, 1, prices, n, dp));
        }else{
            profit += Math.max(prices[ind] + maxProfitRecursion(ind+1, 1, prices, n, dp),
             0 + maxProfitRecursion(ind+1, 0, prices, n, dp));
        }
        return dp[ind][buy] = profit;
    }

    public int maxProfit(int[] prices) {
        int n = prices.length;
        int dp[][] = new int[n][2];
        for(int i=0;i<dp.length;i++){
            Arrays.fill(dp[i], -1);
        }
        // the params for the fn->ind, buy, prices array, size of prices array
        return maxProfitRecursion(0, 1, prices, n, dp); //buy==1 => can buy, buy==0 => cannot buy
    }
}

//memoisation -> n to 0 approach 
//tabulation 

2) Longest Palindromic Subsequence - medium 
//tabulation 
class Solution {
    public static int LPStabulation(String s, int n){
        int dp[][] = new int[n+1][n+1];
        for(int i=1;i<=n;i++){
            for(int j=1;j<=n;j++){
                if(s.charAt(i-1)==s.charAt(n-j)){
                    dp[i][j] = dp[i-1][j-1]+1;
                }else{
                    dp[i][j] = Math.max(dp[i-1][j], dp[i][j-1]);
                }
            }
        }
        return dp[n][n];
    }
    public int longestPalindromeSubseq(String s) {
        int n = s.length();
        return LPStabulation(s, n);
    }
}

3) Min ops to collect elements - easy
class Solution {
    public int minOperations(List<Integer> nums, int k) {
        int[] collected = new int[k];
        Arrays.fill(collected, 0);
        
        int ct = 0;
        int ans = -1;
        
        for (int j = nums.size() - 1; j >= 0; j--) {
            int num = nums.get(j);
            
            if (num <= k && num > 0 && collected[num - 1] == 0) {
                collected[num - 1] = 1;
                ct++;
            }
            
            if (ct == k) {
                ans = nums.size() - j;
                break;
            }
        }
        
        return ans;
    }
}

4) Min ops to make array empty - medium
class Solution {
    public int minOperations(int[] nums) {
        Map<Integer, Integer> frequencyMap = new HashMap<>();

        for (int num : nums) {
            frequencyMap.put(num, frequencyMap.getOrDefault(num, 0) + 1);
        }
        
        int ans = 0;
        for (int freq : frequencyMap.values()) {
            if (freq == 1) {
                return -1;
            }if (freq>1){
                if(freq%3==0){
                    ans=ans+freq/3;
                }
                else if(freq%3==2){
                    ans+=1;
                    ans=ans+(freq-2)/3;
                }else{
                    ans+=2;
                    ans=ans+(freq-4)/3;
                }
            }
        }
        return ans;
    }
}
