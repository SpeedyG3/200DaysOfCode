1) Generate Parentheses - medium 
class Solution {
    public static void generator(List<String> list, int n, int pos, char str[], int open, int close){
        if(pos==str.length && str[str.length-1]==')'){
            list.add(new String(str));
        }
        else{
            if(open>close){
                str[pos] = ')';
                generator(list, n, pos+1, str, open, close+1);
            }
            if(open<n){
                str[pos] = '(';
                generator(list, n, pos+1, str, open+1, close);
            }
        }
    }

    public List<String> generateParenthesis(int n) {
        List<String> list = new ArrayList<>();
        if(n==1){
            list.add("()");
            return list;
        }
        char str[] = new char[2*n];
                //n, pos, char-array, open, close  -> params in below function
        generator(list, n, 0, str, 0, 0);
        return list;
    }
}

2) Monotonic array - easy 
class Solution {
    public static boolean inc(int arr[]){
        for(int i=0;i<arr.length-1;i++){
            if(arr[i+1]<arr[i]){
                return false;
            }
        }
        return true;
    }

    public static boolean dec(int arr[]){
        for(int i=0;i<arr.length-1;i++){
            if(arr[i+1]>arr[i]){
                return false;
            }
        }
        return true;
    }
    public boolean isMonotonic(int[] nums){
        return inc(nums) || dec(nums);
    }
}

//small soln but worse than my prev one
class Solution {
    public boolean isMonotonic(int[] nums) {
        if(nums.length<2) return true;
        int dir = 0; //0 is == , +1 is inc, -1 is dec
        for(int i=1;i<nums.length;i++){
            if(nums[i]>nums[i-1]){
                if(dir==0) dir=1;
                else if(dir==-1) return false;
            }else if(nums[i]<nums[i-1]){
                if(dir==0) dir=-1;
                else if(dir==1) return false;
            }
        }
        return true;
    }
}

3) Best Time to buy a stock 1 - easy
//soln with dp
//another soln is there...which is a bit better maybe
class Solution{
	public int maxProfit(int[] prices) {
		int res=0;
		int[] dp = new int[prices.length];
		dp[0]=prices[0];
		for(int i=1; i<prices.length; i++){
			dp[i] = Math.min(dp[i-1], prices[i]);
		}
		for(int i=0; i<prices.length; i++){
			res = Math.max(res, prices[i]-dp[i]);
		}
		return res;
	}
}

