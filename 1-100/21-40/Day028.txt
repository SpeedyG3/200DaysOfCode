1) Remove Colored Pieces if Both Neighbors are the Same Color - medium
//my soln gives TLE
class Solution {
    public static String pick(String colors, int turn){
        char c = 'A';
        if(turn==1){
            c = 'B';
        }
        for(int i=1;i<colors.length()-1;i++){
            if(colors.charAt(i)==c && colors.charAt(i)==colors.charAt(i+1) 
            && colors.charAt(i)==colors.charAt(i-1)){
                turn=turn+1%2;
                return colors.substring(0,i)+colors.substring(i+1);
            }
        }
        return "";
    }
    public boolean winnerOfGame(String colors) {
        if(colors.length()<3){
            return false;
        }
        int turn = 0; //0->A and 1->B
        boolean ans = true;
        while(true){
            String s = pick(colors, turn);
            if(s==""){
                if(turn==0){
                    ans = false;
                    break;
                }else{
                    ans=true;
                    break;
                }
            }
            colors = s; // Update the colors string after each move
            turn = 1 - turn; // Switch turns
        }
        return ans;
    }
}

//insane and easy and nice beats on lc
class Solution {
    public boolean winnerOfGame(String colors) {
        int A =0;
        int B =0;
        for(int i=1;i<colors.length()-1;i++){
            char curr = colors.charAt(i);
            char next = colors.charAt(i+1);
            char prev = colors.charAt(i-1);
            if(curr=='A' && next=='A' && prev=='A'){
                A++;
            }else if(curr=='B' && next=='B' && prev=='B'){
                B++;
            }
        }
        return A>B;
    }
}

2) Decoded String at Index - medium
class Solution {
    public String decodeAtIndex(String s, int k) {
        long size = 0;
        int n = s.length();

        // Calculate the size of the decoded string
        for (int i = 0; i < n; i++) {
            char c = s.charAt(i);
            if (Character.isDigit(c)) {
                size *= (c - '0');
            } else {
                size++;
            }
        }

        for (int i = n - 1; i >= 0; i--) {
            char c = s.charAt(i);
            k %= size; // Reduce k to its effective position within the current size

            if (k == 0 && Character.isLetter(c)) {
                return Character.toString(c);
            }

            if (Character.isDigit(c)) {
                size /= (c - '0');
            } else {
                size--;
            }
        }

        return null;
    }
}

3) Ugly number - easy 
class Solution {
    public boolean isUgly(int n) {
        if (n < 1) return false;
        while (n % 2 == 0) {
            n /= 2;
        }
        while (n % 3 == 0) {
            n /= 3;
        }
        while (n % 5 == 0) {
            n /= 5;
        }
        return n == 1;
    }
}