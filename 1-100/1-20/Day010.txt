1) Set Matrix Zeroes - medium
class Solution {
    public void setZeroes(int[][] matrix) {
        int n=matrix.length;
        int m=matrix[0].length;
        boolean[][] vis=new boolean[n][m];
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                // check whether it is previous zero or modified zero
                if(matrix[i][j]==0 && vis[i][j]==false){
                    fill(i,j,matrix,vis);
                }
            }
        }
    }
    public void fill(int x,int y,int[][] mat,boolean[][] vis){
        int n=mat.length;
        int m=mat[0].length;
        for(int i=0;i<n;i++){
            if(mat[i][y]!=0){
                mat[i][y]=0;
                vis[i][y]=true;
            }
        }
        
        for(int j=0;j<m;j++){
            if(mat[x][j]!=0){
                mat[x][j]=0;
                vis[x][j]=true;
            }
        }
    }
}

2) Sort Colors - medium
class Solution {
    public void sortColors(int[] nums) {
        int low=0;
        int high = nums.length-1;
        int mid=0;
        while(mid<=high){
            if(nums[mid]==0){
                int temp = nums[mid];
                nums[mid] = nums[low];
                nums[low] = temp;
                low++;  mid++;
            }
            else if(nums[mid]==1){
                mid++;
            }else{
                int temp =nums[mid];
                nums[mid] = nums[high];
                nums[high] = temp;
                high--;
            }
        }    
    }
}
// Easily Explained JAVA sol.(Most Optimal)
// harsh_tiwari_
// Aug LeetCoding Challenge
// 295
// 1440
// Jul 07, 2023
// Java
// Intuition: Dutch National Flag Algorithm
// -> Maintain three pointers low and mid at 0, high at end.
// -> Iterate mid & whenever there is 0 put that to extream left by swapping it with low and increment low and mid.
// -> Whenever there is 1 just let it be there and increment mid.
// -> whenever there is 2 put that to extream right by swapping nums[mid] with nums[high].

// Approach: 3 Pointers
// Complexity
// Time complexity: O(N)
// Space complexity: O(1)