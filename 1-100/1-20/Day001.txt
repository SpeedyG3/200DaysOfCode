1) Climbing Stairs
//basic recursion
// import java.util.*;
// public class ClimbingStairs{
//     public static int calcwaystoClimb(int n)
//     {
//         if(n==0)
//         {
//             return 1;
//         }
//         if(n<0)
//         {
//             return 0;
//         }
//         return calcwaystoClimb(n-1)+calcwaystoClimb(n-2);
//     }

//     public static void main(String args[]){
//         int n = 5; //n = 3, ways = 3. n = 4, ways = 5. total = 8(for n=5)
//         System.out.println(calcwaystoClimb(n));
//     }
// }


//rec + memocalcwaystoClimb
import java.util.*;
public class ClimbingStairs{
    public static int calcwaystoClimbMemo(int n, int ways[])
    {
        if(n==0)
        {
            return 1;
        }
        if(n<0)
        {
            return 0;
        }
        if(ways[n]!=-1)
        {
            return ways[n];
        }
        ways[n] = calcwaystoClimbMemo(n-1, ways)+calcwaystoClimbMemo(n-2, ways);
        return ways[n];
    }

    public static int calcwaystoClimbTab(int n)
    {
        int dp[] = new int[n+1];
        dp[0] = 1;

        for(int i=1;i<=n;i++)
        {
            if(i==1)
            {
                dp[i] = dp[i-1];
            }
            else{
                dp[i] = dp[i-1]+dp[i-2];
            }
        }

        return dp[n];
    }

    public static void main(String args[]){
        int n = 5; //n = 3, ways = 3. n = 4, ways = 5. total = 8(for n=5)
        int ways[] = new int[n+1];
        Arrays.fill(ways, -1);
        System.out.println(calcwaystoClimbMemo(n, ways));
        System.out.println(calcwaystoClimbTab(n));
    }
} 

2) Guess Number Higher or Lower
/** 
 * Forward declaration of guess API.
 * @param  num   your guess
 * @return 	     -1 if num is higher than the picked number
 *			      1 if num is lower than the picked number
 *               otherwise return 0
 * int guess(int num);
 */

public class Solution extends GuessGame {
    public int guessNumber(int n) {
        int l=1, h=n;
        while(l<h){
            int mid=l+(h-l)/2;
            if(guess(mid)==0){
                return mid;
            }else if(guess(mid)==-1){
                h=mid;
            }else{
                l=mid+1;
            }
        }
        return l; 
    }
}

3) Third Maximum Number
class Solution {
    public static void reverseArray(int[] arr) {
        int left = 0;
        int right = arr.length - 1;

        while (left < right) {
            // Swap the elements at the left and right positions
            int temp = arr[left];
            arr[left] = arr[right];
            arr[right] = temp;

            // Move the pointers towards each other
            left++;
            right--;
        }
    }

    public int thirdMax(int[] nums) {
        Arrays.sort(nums);
        //reverse array
        reverseArray(nums);
        
        int ct=0;
        int index=0;
        for(int i=0;i<nums.length-1;i++){
            if(nums[i]!=nums[i+1]){
                ct++;
            }
            if(ct==2){
                return nums[i+1];
            }
        }
        return nums[0];
    }
}

4) Next Greater Element I
class Solution {
    public static int nextMax(int nums2[], int n){
        int temp = -1;
        for(int j=0;j<nums2.length;j++){
            if(nums2[j]==n){
                j++;
                while(j<nums2.length){
                    if(nums2[j]>n){
                        temp=nums2[j];
                        return temp;
                    }
                    j++;
                }
            }
        }
        return temp;
    }

    public int[] nextGreaterElement(int[] nums1, int[] nums2) {
        for(int i=0;i<nums1.length;i++){
            int t = nextMax(nums2, nums1[i]);
            nums1[i] = t;
        }
        return nums1;
    }
}

5) Find All numbers Disappeared in an Array

i) no extra space (big brain)
class Solution {
    public List<Integer> findDisappearedNumbers(int[] nums) {
        List<Integer> list = new ArrayList<>();
        int i=0;
        while(i<nums.length){
            // position of this number is 
            int pos = nums[i] - 1;
            if(nums[i]!=nums[pos]){
                int temp = nums[i];
                nums[i] = nums[pos];
                nums[pos] = temp;
            }else{
                i++;
            }
        }

        for(i=0;i<nums.length;i++){
            if(nums[i]!=i+1){
                list.add(i+1);
            }
        }
        return list;
    }
}

ii) Worse soln as takes extra memory
class Solution
{
    public List<Integer> findDisappearedNumbers(int[] nums)
    {
        HashSet<Integer> uniqueNumbers = new HashSet<>();
        ArrayList<Integer> missingNumbers = new ArrayList<>();

        for (int num : nums)
        {
            uniqueNumbers.add(num);
        }

        for (int i = 1; i <= nums.length; i++)
        {
            if (!uniqueNumbers.contains(i))
            {
                missingNumbers.add(i);
            }
        }
        return missingNumbers;
    }
}