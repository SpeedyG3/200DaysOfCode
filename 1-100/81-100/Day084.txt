1) 2207. Maximize Number of Subsequences in a String - medium
reference to understand maybe 
https://leetcode.com/problems/maximize-number-of-subsequences-in-a-string/solutions/1864950/why-first-or-last-intuition-easy-to-understand-java/

class Solution {
    public long maximumSubsequenceCount(String text, String pattern) {
        //p0 case -> taking p0 at first to make p0p1 subsequences
        int ctp0 = 1;
        long ans1 = 0;
        int l = text.length();
        for(int i=0;i<l;i++){
            if(text.charAt(i)==pattern.charAt(1)){
                ans1+=ctp0;
            }
            if(text.charAt(i)==pattern.charAt(0)){
                ctp0++;
            }
        }

        //p1 case -> taking p1 at last to make p0p1 subsequences
        int ctp1 = 1;
        long ans2 = 0;
        for(int i=l-1;i>=0;i--){
            if(text.charAt(i)==pattern.charAt(0)){
                ans2+=ctp1;
            }
            if(text.charAt(i)==pattern.charAt(1)){
                ctp1++;
            }
        }
        //take max of both cases
        return Math.max(ans1, ans2);
    }
}

2) Knight dialer - medium 
//read link
// https://leetcode.com/problems/knight-dialer/solutions/4333888/beats-100-explained-with-video-memorization-visualized-too/?envType=daily-question&envId=2023-11-27
class Solution {
    static final int mod = (int) 1e9 + 7;
    static final int[][] MOVES = {
            /*0*/ {4, 6},
            /*1*/ {6, 8},
            /*2*/ {7, 9},
            /*3*/ {4, 8},
            /*4*/ {0, 3, 9},
            /*5*/ {},
            /*6*/ {0, 1, 7},
            /*7*/ {2, 6},
            /*8*/ {1, 3},
            /*9*/ {2, 4}
    };
    static final int[][] cache = new int[5001][10];
     
    public int knightDialer(int n) {
        return knightDialer(n, new int[]{0, 1, 2, 3, 4, 5, 6, 7, 8, 9});
    }

    int knightDialer(int remaining, int[] nextNumbers) {
        if (remaining == 1) return nextNumbers.length;
        int count = 0;

        for (int nextNumber : nextNumbers) {
            int cur = cache[remaining][nextNumber];
            if (cur == 0) {
                cur = knightDialer(remaining - 1, MOVES[nextNumber]);
                cache[remaining][nextNumber] = cur;
            }
            count += cur;
            count %= mod;
        }
        return count;
    }
} 

3) litcoder mod3 lab1 Q2 - cookies - see image in resp folder
import java.io.*;
import java.util.*;
import java.text.*;
import java.math.*;
import java.util.regex.*;
public class Main {
    public static void main(String[] args) {
        Scanner input = new Scanner(System.in);
        int target = input.nextInt();
        int n = input.nextInt();
        ArrayList<Integer> arr = new ArrayList<>();
        for(int i=0;i<n;i++){
            arr.add(input.nextInt());
        }
        Collections.sort(arr); // Initial sorting
        int steps = 0;
        int a = 0;
        int b = 1;
        while(arr.size()>1){
            if(arr.get(a)>=target){
                break;
            }
            int c = arr.get(a) + 2*arr.get(b);
            arr.set(a, c);
            arr.remove(b);
            steps++;
            a++;
            if(a>=arr.size()-1){
                a=0;
                b=1;
            }
            b++;
        }
        System.out.println(steps);
    }
}
       