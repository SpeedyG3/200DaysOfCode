1) Pascals triangle - I - easy 
class Solution {
    public List<List<Integer>> generate(int numRows) {
        List<List<Integer>> ans = new ArrayList<>();
        for(int i=1;i<=numRows;i++){
            List<Integer> sub = new ArrayList<>();
            int res=1;
            for(int j=0;j<i;j++){
                //if(j==0) case 
                if(j!=0){
                    res*=(i-j);
                    res/=j;
                }
                sub.add(res);
            }
            ans.add(sub);
        }
        return ans;
    }
}

2) Pascal Triangle - II - easy
class Solution {
    public List<Integer> getRow(int rowIndex) {
        rowIndex++;
        List<Integer> ans = new ArrayList<>();
        long res=1;
        ans.add(1);
        for(int i=1;i<rowIndex;i++){
            res*=(rowIndex-i);
            res/=i;
            ans.add((int)res);
        }
        return ans;
    }
}

3) Remove nth node from the end in ll - medium 
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode removeNthFromEnd(ListNode head, int n) {
        int size=1;
        ListNode temp = head;
        while(temp.next!=null){
            temp=temp.next;
            size++;
        }
        n=size-n;
        if(size==1 || n==0){
            return head.next;
        }
        int i = 1;
        temp = head;
        while(i<n){
            i++;
            temp=temp.next;
        }
        temp.next = temp.next.next;
        return head;
    }
}

4) Remove Duplicates in a sorted list - I - easy
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode deleteDuplicates(ListNode head) {
        ListNode temp = head;
        while(temp!=null && temp.next!=null)
        {
            if(temp.val==temp.next.val)
            {
                temp.next = temp.next.next;
            }
            else
            {
                temp = temp.next;
            }
        }
        return head;
    }
}

5) Remove Duplicates in a sorted list - II - medium
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode deleteDuplicates(ListNode head) {
        if(head==null || head.next==null){
            return head;
        }
        ListNode prev = null;
        ListNode temp = head;
        while(temp!=null){
            if(temp.next!=null && temp.val==temp.next.val){
                int v = temp.val;
                while(temp!=null && temp.val==v){
                    temp = temp.next;
                }
                if(prev==null){
                    head = temp; //prev=null
                }else{
                    prev.next=temp;
                }
            }else{
                prev=temp;
                temp=temp.next;
            }
        }
        return head;
    }
} 