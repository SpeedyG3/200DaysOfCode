1) 70. Climbing Stairs - easy
class Solution {
    public int climbStairs(int n) {
        int prev2 = 1;
        int prev = 1;
        for(int i=2;i<=n;i++){
            int curr = prev + prev2;
            prev2 = prev;
            prev = curr;
        }
        return prev;
    }
}

//striver coding ninjas 
2) frog jump 
///tabulation
import java.util.* ;
import java.io.*; 
public class Solution {
    public static int frogJump(int n, int heights[]) {
        int dp[] = new int[n];
        dp[0] = 0;
        for(int i=1;i<n;i++){
            int left = dp[i-1] + Math.abs(heights[i]-heights[i-1]);
            int right = Integer.MAX_VALUE;
            if(i>1){
                right = dp[i-2] + Math.abs(heights[i]-heights[i-2]);
            }
            dp[i] = Math.min(left, right);
        }
        return dp[n-1];
    }
}

//space optimised tabulation
import java.util.* ;
import java.io.*; 
public class Solution {
    public static int frogJump(int n, int heights[]) {
        int dp[] = new int[n];
        int prev = 0;        
        int prev2 = 0;
        for(int i=1;i<n;i++){
            int left = prev + Math.abs(heights[i]-heights[i-1]);
            int right = Integer.MAX_VALUE;
            if(i>1){
                right = prev2 + Math.abs(heights[i]-heights[i-2]);
            }
            int curr = Math.min(left, right);
            prev2 = prev;
            prev = curr;
        }
        return prev;
    }
}

3) striver coding nin jas DP -> Frog Jump with k distances(DP-4)
// memoisation for
import java.util.*;
public class Solution {
    public static int recSoln(int dp[], int idx, int k, int height[]){
        if(idx==0){
            return 0;
        }

        if(dp[idx]!=-1){
            return dp[idx];
        }

        int min = Integer.MAX_VALUE;
        for(int i=1;i<=k;i++){
            if(idx-i>=0){
                int val = recSoln(dp, idx-i, k, height) + Math.abs(height[idx] - height[idx-i]);
                min = Math.min(val , min);
            }
        }

        return dp[idx]  = min;
    }
    public static int minimizeCost(int n, int k, int []height){
        // Write your code here.
        int dp[] = new int[n];
        Arrays.fill(dp, -1);
        return recSoln(dp, n-1, k, height);
    }
}

//tabulation
import java.util.*;
public class Solution {
    public static int minimizeCost(int n, int k, int []height){
        // Write your code here.
        int dp[] = new int[n];
        dp[0] = 0;
        for(int i=1;i<n;i++){
            dp[i] = Integer.MAX_VALUE;
            for(int j=1;j<=k;j++){
                if(i-j>=0){
                    int val = dp[i-j] + Math.abs(height[i] - height[i-j]);
                    dp[i] = Math.min(dp[i], val);
                }
            }
        }
        return dp[n-1];
    }
}

//tabulation space optm 
not needed to do 

4) 198. House Robber - medium
//striver dp 
class Solution { //recursive soln 
    public static int recSoln(int idx, int nums[]){
        if(idx==0){
            return nums[0];
        }
        if(idx==1){
            return Math.max(nums[0], nums[1]);
        }

        int a = nums[idx] + recSoln(idx-2, nums);
        int b = recSoln(idx-1, nums);
        return Math.max(a, b);
    }
    public int rob(int[] nums) {
        return recSoln(nums.length-1, nums);
    }
}

//memoisation
class Solution { //memoisation
    public static int recSoln(int dp[], int idx, int nums[]){
        if(dp[idx]!=-1){
            return dp[idx];
        }

        if(idx==0){
            return nums[0];
        }
        if(idx==1){
            return Math.max(nums[0], nums[1]);
        }
        
        return dp[idx] = Math.max(nums[idx] + recSoln(dp, idx-2, nums), 
        recSoln(dp, idx-1, nums));
    }
    public int rob(int[] nums) {
        int n = nums.length;
        int dp[] = new int[n];
        Arrays.fill(dp, -1);
        return recSoln(dp, n-1, nums);
    }
}

class Solution { //tabulation
    public int rob(int[] nums) {
        int n = nums.length;
        int dp[] = new int[n];
        dp[0] = nums[0];
        if(n>1){
            dp[1] = Math.max(nums[0], nums[1]);
        }

        for(int i=2;i<n;i++){
            dp[i] = Math.max(nums[i]+dp[i-2], dp[i-1]);
        }
        return dp[n-1];
    }
}

//tabulation + space optimisation 
class Solution { //tabulation
    public int rob(int[] nums) {
        int n = nums.length;
        int prev2 = nums[0];
        int prev = nums[0];
        if(n>1){
            prev = Math.max(nums[0], nums[1]);
        }

        for(int i=2;i<n;i++){
            int curr = Math.max(nums[i]+prev2, prev);
            prev2 = prev;
            prev = curr;
        }
        return prev;
    }
}

5) 213. House Robber II - medium
class Solution { //space optm soln directly as its just a mod of HR1
    //tabulation + space optimisation 
    public int rob1(int[] nums) {
        int n = nums.length;
        int prev2 = nums[0];
        int prev = nums[0];
        if(n>1){
            prev = Math.max(nums[0], nums[1]);
        }

        for(int i=2;i<n;i++){
            int curr = Math.max(nums[i]+prev2, prev);
            prev2 = prev;
            prev = curr;
        }
        return prev;
    }

    public int rob(int[] nums) {
        int n = nums.length;
        if(n==1){
            return nums[0];
        }
        int nums1[] = new int[n-1];
        int nums2[] = new int[n-1];
        for(int i=1;i<n;i++){
            nums1[i-1] = nums[i-1]; //leaving last 
            nums2[i-1] = nums[i]; //leaving first 
        }
        int ans = Math.max(rob1(nums1), rob1(nums2));
        //leaving last in 1 and leaving 1st in one 
        //max of both gives ans(max) this 
        return ans;
    }
}

6) 41. First Missing Positive - hard
class Solution {
    public int firstMissingPositive(int[] nums) {
        int n = nums.length;
        for(int i=0;i<n;i++){
            while(nums[i]>0 && nums[i]<=n && nums[i]!=nums[nums[i]-1]){
                int temp = nums[i];
                int idx = nums[i]-1;
                nums[i] = nums[idx];
                nums[idx] = temp;
            }
        }

        for(int i=0;i<n;i++){
            if(nums[i]!=i+1){
                return i+1;
            }
        }
        return n+1;
    }
}
// https://leetcode.com/problems/first-missing-positive/?envType=daily-question&envId=2024-03-26