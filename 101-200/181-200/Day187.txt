1) 139. Word Break - medium
//gives TLE But it is a correct recursive solution to the problem
class Solution {
    public static boolean recSoln(String s, int idx, HashSet<String> wordDict){
        //base case 
        if(idx==s.length()){
            return true;
        }

        for(int j=idx; j<s.length();j++){
            if(wordDict.contains(s.substring(idx, j+1))){
                if(recSoln(s, j+1, wordDict)){
                    return true;
                }
            }
        }
        return false;
    }

    public boolean wordBreak(String s, List<String> wordDict) {
        return recSoln(s, 0, new HashSet<String>(wordDict));
    }
}

//optimisation using memoisation 
class Solution { //memoisation soln to reduce TC
//BOOLEAN TYPE VERY IMPORTANT CAN ALSO STORE NULL
    public static boolean memoSoln(String s, Boolean dp[], HashSet<String> wordDict, int idx){
        //base case 
        if(idx==s.length()){
            return true;
        }
        if(dp[idx]!=null){ //BOOLEAN CAN STORE NULL
            return dp[idx];
        }

        for(int j=idx; j<s.length();j++){
            if(wordDict.contains(s.substring(idx, j+1))){
                if(memoSoln(s, dp, wordDict, j+1)){
                    return dp[idx] = true;
                }
            }
        }
        return dp[idx] = false;
    }

    public boolean wordBreak(String s, List<String> wordDict) {
        Boolean dp[] = new Boolean[s.length()];
        return memoSoln(s, dp, new HashSet<String>(wordDict), 0);
    }
}

2) 37. Sudoku Solver - hard
class Solution {
    public static boolean isValid(char board[][], int r, int c, char d){
        // i -> row, j -> col
        //col, row and 3x3 box check
        for(int i=0;i<9;i++){
            //check in corresponding row
            if(board[r][i]==d){ //checking in same row 
                return false;
            }
            //check in corresponding col
            if(board[i][c]==d){ //checking in the same col 
                return false;
            }

            //3x3 box check => the most important and maths based
            if(board[3*(r/3)+i/3][3*(c/3)+i%3]==d){
                return false;
            }
        }
        return true;
    }

    public static boolean backtrackSoln(char board[][]){
        for(int i=0;i<board.length;i++){
            for(int j=0;j<board[i].length;j++){
                if(board[i][j]=='.'){ //meant for filling purpose cant overwrite written numbers 
                    for(char k='1';k<='9';k++){
                        if(isValid(board, i, j, k)){
                            board[i][j] = k;
                            if(backtrackSoln(board)){
                                return true;
                            }else{
                                board[i][j] = '.';
                            }
                        }
                    }
                    return false;
                }
            }
        }
        return true;
    }

    public void solveSudoku(char[][] board) {
        backtrackSoln(board);
    }
}

3) 
//my soln -> can do better with binary Search
public class Solution {
    public int pivotInteger(int n) {
        if(n == 1){
            return 1;
        }
        int left = 1;
        int right = n;
        int totalSum = n * (n + 1) / 2;
        while (left < right) {
            int mid = (left + right) / 2;
            int leftSum = mid * (mid + 1) / 2;
            int rightSum = totalSum - leftSum + mid;
            if (leftSum == rightSum){
                return mid;
            }else if (leftSum < rightSum) {
                left = mid + 1; 
            } else {
                right = mid;
            }
        }
        return -1;
    }
}

//binary search 
public class Solution {
    public int pivotInteger(int n) {
        if(n == 1){
            return 1;
        }
        int left = 1;
        int right = n;
        int totalSum = n * (n + 1) / 2;
        while (left < right) {
            int mid = (left + right) / 2;
            int leftSum = mid * (mid + 1) / 2;
            int rightSum = totalSum - leftSum + mid;
            if (leftSum == rightSum){
                return mid;
            }else if (leftSum < rightSum) {
                left = mid + 1; 
            } else {
                right = mid;
            }
        }
        return -1;
    }
}