1) 121. Best Time to Buy and Sell Stock - easy 
class Solution {
    public int maxProfit(int[] prices) {
        //strivers method 
        int min = prices[0];
        int profit = 0;
        for(int i=1;i<prices.length;i++){
            profit = Math.max(profit, prices[i]-min);
            min = Math.min(min, prices[i]);
        }
        return profit;
    }
}

2) 122. Best Time to Buy and Sell Stock II - medium
class Solution {
    public static int maxProfitRecursion(int ind, int buy, int prices[], int n, int dp[][]){
        if(ind==n){
            return 0;
        }
        if(dp[ind][buy]!=-1){
            return dp[ind][buy];
        } 
        
        int profit=0;
        if(buy==1){
            profit += Math.max(-prices[ind] + maxProfitRecursion(ind+1, 0, prices, n, dp),
             0 + maxProfitRecursion(ind+1, 1, prices, n, dp));
        }else{
            profit += Math.max(prices[ind] + maxProfitRecursion(ind+1, 1, prices, n, dp),
             0 + maxProfitRecursion(ind+1, 0, prices, n, dp));
        }
        return dp[ind][buy] = profit;
    }

    public int maxProfit(int[] prices) {
        int n = prices.length;
        int dp[][] = new int[n][2];
        for(int i=0;i<dp.length;i++){
            Arrays.fill(dp[i], -1);
        }
        // the params for the fn->ind, buy, prices array, size of prices array
        return maxProfitRecursion(0, 1, prices, n, dp); //buy==1 => can buy, buy==0 => cannot buy
    }
}

3) 713. Subarray Product Less Than K - medium
class Solution { // https://leetcode.com/problems/subarray-product-less-than-k/?envType=daily-question&envId=2024-03-27
    public int numSubarrayProductLessThanK(int[] nums, int k) {
        int left = 0;
        int right = 0;
        int n = nums.length;
        int prod = 1;
        int ans = 0;
        while(right<n){
            prod *= nums[right];
            while(left<=right && prod>=k){
                prod = prod/nums[left];
                left++;
            }
            ans += (right-left+1);
            right++;
        }
        return ans;
    }
}