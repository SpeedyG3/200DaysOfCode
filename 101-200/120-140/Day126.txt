1) 938. Range Sum of BST - easy 
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public int rangeSumBST(TreeNode root, int low, int high) {
        int sum = 0;
        if(root==null){
            return 0;
        }
        else if(root.val>=low && root.val<=high){
            sum += root.val;
            return sum + rangeSumBST(root.left, low, high)
                + rangeSumBST(root.right, low,high);
        }
        else if(root.val<low){
            return rangeSumBST(root.right, low, high);
        }
        else{
            return rangeSumBST(root.left, low, high);
        }   
    }
}

2) 3000. Maximum Area of Longest Diagonal Rectangle - easy
class Solution {
    public int areaOfMaxDiagonal(int[][] dimensions) {
        int l = dimensions.length;
        double maxDiagonal = Math.sqrt(Math.pow(dimensions[0][0], 2)
         + Math.pow(dimensions[0][1], 2));
        int maxArea = dimensions[0][0] * dimensions[0][1];
        for(int i=1;i<l;i++){
            double curr = Math.sqrt(Math.pow(dimensions[i][0], 2) 
            + Math.pow(dimensions[i][1], 2));
            if(curr>maxDiagonal){
                maxDiagonal = curr;
                maxArea = dimensions[i][0] * dimensions[i][1];
            }else if(curr==maxDiagonal){
                maxArea = Math.max(maxArea, dimensions[i][0]*dimensions[i][1]);
            }
        }
        return maxArea;
    }
}