1) 645. Set Mismatch - easy 
//ok approach 
class Solution {
    public int[] findErrorNums(int[] nums) {
        int ans[] = new int[2];
        int n = nums.length;
        HashMap<Integer, Integer> hm = new HashMap<>();
        for(int i=0;i<n;i++){
            hm.put(nums[i], hm.getOrDefault(nums[i], 0)+1);
        }

        for(int i=1;i<=n;i++){
            if(hm.containsKey(i) && hm.get(i)==2){
                ans[0] = i;
            }else if(!hm.containsKey(i)){
                ans[1] = i;
            }
        }

        return ans;

    }
}

2) 56. Merge Intervals - medium 
//brute soln
class Solution {
    public int[][] merge(int[][] intervals) {
        //brute force soln
        int n = intervals.length;
        if(n==1) return intervals;
        Arrays.sort(intervals, (a,b) -> a[0]-b[0]);
        List<List<Integer>> ans = new ArrayList<>();
        for(int i=0;i<n;i++){
            int st = intervals[i][0];
            int end = intervals[i][1];
            if(!ans.isEmpty() && end<=ans.get(ans.size()-1).get(1)){
                continue;
            }
            for(int j=i+1;j<n;j++){
                if(intervals[j][0]<=end){
                    end = Math.max(end, intervals[j][1]);
                }else{
                    break;
                }
            }
            List<Integer> temp = new ArrayList<>();
            temp.add(st);
            temp.add(end);
            ans.add(temp);
        }

        int array[][] = new int[ans.size()][2];
        for(int i=0;i<ans.size();i++){
            for(int j=0;j<2;j++){
                array[i][j] = ans.get(i).get(j);
            }
        }
        return array;
    }
}

//optimal 
class Solution {
    public int[][] merge(int[][] intervals) {
        //optimal soln - watch strivers
        int n = intervals.length;
        Arrays.sort(intervals, (a,b)->a[0]-b[0]);
        List<List<Integer>> ans = new ArrayList<>();
        for(int i=0;i<n;i++){
            if(ans.isEmpty() || intervals[i][0] > ans.get(ans.size()-1).get(1)){
                List<Integer> temp = new ArrayList<>();
                temp.add(intervals[i][0]);
                temp.add(intervals[i][1]);
                ans.add(temp);
            }else{
                ans.get(ans.size()-1).set(1, Math.max(ans.get(ans.size()-1).get(1), intervals[i][1]));
            }
        }

        int array[][] = new int[ans.size()][2];
        for(int i=0;i<ans.size();i++){
            for(int j=0;j<2;j++){
                array[i][j] = ans.get(i).get(j);
            }
        }
        return array;
    }
}

3) 560. Subarray Sum Equals K - medium 
//optimal -> strivers
class Solution {
    public int subarraySum(int[] nums, int k) {
        HashMap<Integer, Integer> hm = new HashMap<>(); //prefSum, ct;
        hm.put(0, 1);
        int prefSum = 0;
        int ct = 0;
        for(int i=0;i<nums.length;i++){
            prefSum += nums[i];
            int remove = prefSum - k;
            if(hm.containsKey(remove)){
                ct = ct + hm.get(remove);
            }
            hm.put(prefSum, hm.getOrDefault(prefSum, 0)+1);
        }
        return ct;
    }
}

4) Longest Subarray With Zero Sum - medium
//not lc q , strivers sheet
import java.util.*;
public class Solution {
    public static int getLongestZeroSumSubarrayLength(int []arr){
        // Write your code here.
        HashMap<Integer, Integer> hm = new HashMap<>();
        int ans = 0;
        int prefSum = 0;
        for(int i=0;i<arr.length;i++){
            prefSum += arr[i];
            if(prefSum==0){
                ans=i+1;
            }else{
                if(hm.containsKey(prefSum)){
                   ans = Math.max(ans, i-hm.get(prefSum));
                }else{
                    hm.put(prefSum, i);
                }
            }
            
        }
        return ans;
    }
}