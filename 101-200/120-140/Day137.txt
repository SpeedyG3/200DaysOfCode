1) 3010. Divide an Array Into Subarrays With Minimum Cost I - easy 
class Solution {
    public int minimumCost(int[] nums) {
        int cost = nums[0];
        int min = Integer.MAX_VALUE;
        int secMin = Integer.MAX_VALUE;
        for(int i=1;i<nums.length;i++){
            if(nums[i]<min){ //secMin is always > than min assumed as it is second min
                secMin = min;
                min = nums[i];
            }else if(nums[i]<secMin){
                secMin = nums[i];
            }
        }
        return cost+min+secMin;
    }
}

2) 3011. Find if Array Can Be Sorted - medium 
//bubble sort and bitcount check 
class Solution {
    public boolean canSortArray(int[] nums) {
        int n = nums.length;
        for(int i=0;i<n;i++){
            for(int j=0;j<nums.length-i-1;j++){
                if(nums[j]>nums[j+1] && Integer.bitCount(nums[j])==Integer.bitCount(nums[j+1])) swap(nums,j,j+1);
            }
        }
        
        for(int i=1;i<n;i++){
            if(nums[i]<nums[i-1]) return false;
        }
        return true;
    }
    
    public void swap(int[] arr,int i, int j){
        int temp = arr[i];
        arr[i]=arr[j];
        arr[j]=temp;
    }
}

3) 3014. Minimum Number of Pushes to Type Word I - easy
class Solution {
    public int minimumPushes(String word) {
        int l = word.length();
        if(l<=8){
            return l;
        }else if(l>=9 && l<=16){
            return 8 + (l-8)*2;
        }else if(l>=17 && l<=24){
            return 24 + (l-16)*3;
        }
        return 48 + (l-24)*4;
    }
}

4) 198. House Robber - medium
class Solution {
    public static int robHelper(int nums[], int dp[], int ind){
        if(ind==0){
            return nums[0];
        }else if(ind<0){
            return 0;
        }
        if(dp[ind]!=-1){
            return dp[ind];
        }
        //steal , not steal cases
        return dp[ind] = Math.max(0 + robHelper(nums, dp, ind-1), nums[ind]+robHelper(nums, dp, ind-2));
    }

    public int rob(int[] nums) {
        int index = nums.length-1;
        int dp[] = new int[index+1];
        Arrays.fill(dp, -1);
        return robHelper(nums, dp, index);
    }
}

5) 15. 3Sum - medium  
//brute o(n^3)
//better one how to implement
class Solution {
    public List<List<Integer>> threeSum(int[] nums) {
        Set<List<Integer>> set = new HashSet<>();
        int n = nums.length;
        for(int i=0;i<n;i++){
            Set<Integer> s = new HashSet<>();
            for(int j=i+1;j<n;j++){
                int third = -(nums[i]+nums[j]);
                if(s.contains(third)){
                    List<Integer> temp = new ArrayList<>();
                    temp.add(nums[i]);
                    temp.add(nums[j]);
                    temp.add(third);
                    Collections.sort(temp);
                    set.add(temp);
                }
                s.add(nums[j]);
            }
        }
        return new ArrayList<List<Integer>> (set);
    }
}

//best soln doing from striver
class Solution {
    public List<List<Integer>> threeSum(int[] nums) {
        Arrays.sort(nums);
        List<List<Integer>> ans = new ArrayList<>();
        int n = nums.length;
        for(int i=0;i<n;i++){
            if(i>0 && nums[i]==nums[i-1]){
                continue;
            }
            int j = i+1;
            int k = n-1;
            while(j<k){
                int sum = nums[i] + nums[j] + nums[k];
                if(sum<0){
                    j++;
                }else if(sum>0){
                    k--;
                }else{
                    List<Integer> temp = new ArrayList<>();
                    temp.add(nums[i]);
                    temp.add(nums[j]);
                    temp.add(nums[k]);
                    ans.add(temp);
                    j++;
                    k--;
                    while(j<k && nums[j]==nums[j-1]){
                        j++;
                    }
                    while(j<k && nums[k]==nums[k+1]){
                        k--;
                    }
                }
            }
        }
        return ans;
    }
}

6) 18. 4Sum - medium
//better soln -> striver 
class Solution {
    public List<List<Integer>> fourSum(int[] nums, int target) {
        HashSet<List<Integer>> set = new HashSet<>();
        int l = nums.length;
        for(int i=0;i<l;i++){
            for(int j=i+1;j<l;j++){
                HashSet<Long> s = new HashSet<>();
                for(int k=j+1;k<l;k++){
                    long sum = nums[i] + nums[j];
                    sum += nums[k];
                    long f = target - sum;
                    if(s.contains(f)){
                        List<Integer> temp = new ArrayList<>();
                        temp.add(nums[i]);
                        temp.add(nums[j]);
                        temp.add(nums[k]);
                        temp.add((int)f);
                        Collections.sort(temp);
                        set.add(temp);
                    }
                    s.add((long)nums[k]);
                }
            }
        }
        return new ArrayList<List<Integer>> (set);
    }
}

//best soln 
class Solution {
    public List<List<Integer>> fourSum(int[] nums, int target) {
        int n = nums.length;
        List<List<Integer>> ans = new ArrayList<>();
        Arrays.sort(nums);
        for(int i=0;i<n;i++){
            if(i>0 && nums[i]==nums[i-1]){
                continue;
            }
            for(int j=i+1;j<n;j++){
                if(j!=i+1 && nums[j]==nums[j-1]){
                    continue;
                }
                int k = j+1;
                int l = n-1;
                while(k<l){
                    long sum = nums[i];
                    sum += nums[j] + nums[k];
                    sum += nums[l];
                    if(sum==target){
                        List<Integer> temp = new ArrayList<>();
                        temp.add(nums[i]);
                        temp.add(nums[j]);
                        temp.add(nums[k]);
                        temp.add(nums[l]);
                        ans.add(temp);
                        k++;
                        l--;
                        while(k<l && nums[k]==nums[k-1]){
                            k++;
                        }
                        while(k<l && nums[l]==nums[l+1]){
                            l--;
                        }
                    }else if(sum<target){
                        k++;
                    }else{
                        l--;
                    }
                }
            }
        }
        return ans;
    }
}

7) Subarray with given XOR - strivers dsa sheet
public class Solution {
    public int solve(ArrayList<Integer> A, int B) {
        int l = A.size();
        int ans = 0;
        for(int i=0;i<l;i++){
            int xor = 0;
            for(int j=i;j<l;j++){
                xor = xor ^ A.get(j);
                if(xor==B){
                    ans++;
                }
            }
        }
        return ans;
    }
}
