1) 1750. Minimum Length of String After Deleting Similar Ends - medium
class Solution {
    public int minimumLength(String s) {
        int l = 0;
        int r = s.length()-1;
        while(l<r && s.charAt(l)==s.charAt(r)){ //l==r should not enter loop as it will remove a single char 
            char ch = s.charAt(r);
            while(l<=r && s.charAt(l)==ch){
                l++;
            }
            while(l<=r && s.charAt(r)==ch){
                r--;
            }
        }
        return r-l+1;
    }
}

2) 3070. Count Submatrices with Top-Left Element and Sum Less Than k - medium
class Solution {
    public int countSubmatrices(int[][] grid, int k) {
        int r = grid.length;
        int c = grid[0].length;
        int ans = 0;
        for(int i=0;i<r;i++){
            for(int j=0;j<c;j++){
                if(j>0){
                    grid[i][j] += grid[i][j-1];
                }
                if(i>0){
                    grid[i][j] += grid[i-1][j];
                }
                if(i>0 && j>0){
                    grid[i][j] -= grid[i-1][j-1];
                }

                if(grid[i][j]<=k){
                    ans++;
                }
                //cant understand else break so this is more my soln  
            }
        }
        return ans;
    }
}

3) 22. Generate Parentheses - medium
class Solution {
    public static List<String> recSoln(String s, int open, int close, List<String> ans){
        if(open==0 && close==0){
            ans.add(s);
            return ans;
        }

        if(open>0){
            ans = recSoln(s+'(', open-1, close, ans);
        }
        //can close only when we have opens
        if(open<close){
            ans = recSoln(s+')', open, close-1, ans);
        }
        //more like dummy return now
        return ans;
    }

    public List<String> generateParenthesis(int n) {
        List<String> ans = new ArrayList<>();
        if(n==1){
            ans.add("()");
        }else{
            //n n indicate opens and closes left 
            ans = recSoln("", n, n, ans);
        }
        return ans;
    }
}

4) 39. Combination Sum - medium
class Solution {
    public void recSoln(int ind, int[] arr, int target, List<List<Integer>> ans, List<Integer> list){
        if(ind==arr.length){
            if(target==0){
                ans.add(new ArrayList<>(list));
            }
            return;
        }

        //this is not really exact like pick / not pick 
        //u can chose 1 ele multiple times
        if(arr[ind]<=target){
            list.add(arr[ind]); //pick 
            recSoln(ind, arr, target-arr[ind], ans, list); //reuse 
            list.remove(list.size()-1);
        }
        recSoln(ind+1, arr, target, ans, list);
    }
    public List<List<Integer>> combinationSum(int[] candidates, int target) {
        List<List<Integer>> ans = new ArrayList<>();
        recSoln(0,candidates,target,ans,new ArrayList<>());
        return ans;
    }
}