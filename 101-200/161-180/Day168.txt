1) 997. Find the Town Judge - easy
class Solution {
    public int findJudge(int n, int[][] trust) {
        int[] trusting = new int[n + 1];
        int[] trusted = new int[n + 1];

        for (int i = 0; i < trust.length; i++) {
            trusting[trust[i][0]]++;
            trusted[trust[i][1]]++;
        }

        int ans = -1;

        for (int i = 1; i <= n; i++) {
            if (trusting[i] == 0 && trusted[i] == n - 1){
                ans = i;
            }
        }

        return ans;
    }
}

2) Striver sheet -> coding ninjas -> LLs
Q. Add one to a number represented as Linked List
 public class Solution {
	public static Node reverse(Node head){
		Node curr = head;
		Node prev = null;
		Node nextNode;

		while(curr!=null){
			nextNode = curr.next;
			curr.next = prev;
			prev = curr;
			curr = nextNode;
		}
		return prev;
	}
	public static Node addOne(Node head) {
		// Write your code here.
		head = reverse(head);
		int c = 1;
		Node temp = head;
		while(temp!=null && c>0){
			int val = temp.data + c;
			int dig = 0;
			if(val<=9){
				dig = val;
				c = 0;
			}else{
				dig = val % 10;
				c = val / 10;
			}
			temp.data = dig;
			temp = temp.next;
		}
		head = reverse(head);
		if(c>0){
			Node t = new Node(c);
			t.next =head;
			head = t;
		}
		return head;
	}
}

3) Striver sheet -> coding ninjas -> LLs
Q. Sort linked list of 0s 1s 2s
//can do merge sort but it is not optimal 
//optimal below 
public class Solution
{
    public static Node sortList(Node head) {
        // Write your code here
        if(head==null || head.next==null){
            return head;
        }
        Node temp = head;
        Node d0 = new Node(-1);        
        Node d1 = new Node(-1);
        Node d2 = new Node(-1);
        Node l0 = d0;        
        Node l1 = d1;
        Node l2 = d2;

        while(temp!=null){
            if(temp.data==0){
                l0.next = temp;
                l0 = l0.next;
            }else if(temp.data==1){
                l1.next = temp;
                l1 = l1.next;
            }else{
                l2.next = temp;
                l2 = l2.next;
            }
            temp = temp.next;
        }
        l0.next = d1.next;
        l1.next = d2.next;
        l2.next = null;
        return d0.next;

    }
}

4) Striver sheet -> coding ninjas -> LLs
Q. Length of Loop in LL
public class Solution {
    public static int lengthOfLoop(Node head) {
        if (head == null || head.next == null) {
            return 0; 
        }

        Node slow = head;
        Node fast = head;

        while (fast != null && fast.next != null) {
            slow = slow.next;
            fast = fast.next.next;
            if (slow == fast) {
                break;
            }
        }

        if(fast==null || fast.next==null){
            return 0;
        }

        int length = 0;
        do{
            length++;
            fast = fast.next;
        }while (slow != fast);

        return length;
    }
}
