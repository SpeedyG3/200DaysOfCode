1) 1897. Redistribute Characters to Make All Strings Equal - easy 
class Solution {
    public boolean makeEqual(String[] words) {
      if (words.length == 1) {
			return true;
		}
		int totalCharCount = 0;
		for (String s : words) {
			totalCharCount += s.length();
		}
		if (totalCharCount % words.length != 0) {
			return false;
		}

		int[] myMap = new int[26];
		for (String s : words) {
			for (char c : s.toCharArray()) {
				myMap[c - 'a']++;
			}
		}
		for (int i : myMap) {
			if (i % words.length != 0) {
				return false;
			}
		}
		return true; 
    }
}

//worse soln
class Solution {
    public boolean makeEqual(String[] words) {
        HashMap<Character, Integer> map = new HashMap<>();
        int l = words.length;
        for(int i=0;i<l;i++){
            String word = words[i];
            for(int j=0;j<word.length();j++){
                map.put(word.charAt(j), map.getOrDefault(word.charAt(j), 0)+1);
            }
        }
        for(char key: map.keySet()){
            if(map.get(key)%l!=0){
                return false;
            }
        }
        return true;
    }
}

2) 134. Gas Station - medium  
class Solution {
    public int canCompleteCircuit(int[] gas, int[] cost) {
        int l = gas.length;
        int sumGas = 0;
        int sumCost = 0;
        int st = 0;
        int total = 0;
        for(int i=0;i<l;i++){
            sumGas+=gas[i];
            sumCost+=cost[i];
        }

        if(sumGas<sumCost){
            return -1;
        }

        //using diff array
        for(int i=0;i<l;i++){
            total+=gas[i]-cost[i];
            if(total<0){
                total=0;
                st=i+1;
            }
        }
        return st;
    }
}

3) 135. Candy - hard
//my soln
class Solution {
    public int candy(int[] ratings) {
        int l = ratings.length;
        int candies[] = new int[l];
        Arrays.fill(candies, 1);
        for(int i=1;i<l;i++){
            if(ratings[i]>ratings[i-1]){
                candies[i]=candies[i-1]+1;
            }
        }
        int sum = 0;
        for(int i=l-2;i>=0;i--){
            if(ratings[i]>ratings[i+1]){
                candies[i]=Math.max(candies[i], 1+candies[i+1]);
            }
            sum+=candies[i];
        }
        return sum+candies[l-1];
    }
}

//similar soln 
class Solution {
    public int candy(int[] ratings) {
        int n = ratings.length;
        int[] candies = new int[n];
        Arrays.fill(candies, 1);

        for (int i = 1; i < n; i++) {
            if (ratings[i] > ratings[i - 1]) {
                candies[i] = candies[i - 1] + 1;
            }
        }

        for (int i = n - 2; i >= 0; i--) {
            if (ratings[i] > ratings[i + 1]) {
                candies[i] = Math.max(candies[i], candies[i + 1] + 1);
            }
        }

        int totalCandies = 0;
        for (int candy : candies) {
            totalCandies += candy;
        }

        return totalCandies;
    }
}