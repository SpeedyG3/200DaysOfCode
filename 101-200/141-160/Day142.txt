1) Search Insert Position - easy 
class Solution {
    public int searchInsert(int[] nums, int target) {
        int s = 0;
        int e = nums.length-1;
        while(s<=e){
            int mid = s+(e-s)/2;
            if(nums[mid]==target){
                return mid;
            }else if(nums[mid]>target){
                e = mid-1;
            }else{
                s = mid+1;
            }
        }
        return s;
    }
}

2) 34. Find First and Last Position of Element in Sorted Array - medium 

solved striver sheet bs questions on coding ninjas i lb, ub, floor and ceil, basic bs, count occurences etc

3) 33. Search in Rotated Sorted Array I - medium
class Solution {
    public static int bs(int nums[], int s, int e, int target){
        while(s<=e){
            int mid = s+(e-s)/2;
            if(nums[mid]==target){
                return mid;
            }else if(nums[mid]>target){
                e=mid-1;
            }else{
                s=mid+1;
            }
        }
        return -1;
    }
    
    public int search(int[] nums, int target){
        int ans = -1;
        int l = nums.length;
        int pivot = findPivot(nums, target);
        ans = bs(nums, pivot, l-1, target);
        if(ans==-1){
            ans = bs(nums, 0, pivot-1, target);
        }
        return ans;
    }

    public static int findPivot(int arr[], int target){
        int s=0;
        int e = arr.length-1;
        while(s<=e){
            int mid=(s+e)/2;
            if(mid>0 && arr[mid-1]>arr[mid]){
                return mid;
            }
            else if(arr[s]<=arr[mid] && arr[mid]>arr[e]){
                s=mid+1;
            }
            else{
                e=mid-1;
            }
        }
        return s;
    }
}

//a bit better -> more optimal 
class Solution {
    public int search(int[] nums, int target) {
        int s = 0;
        int e = nums.length-1;
        while(s<=e){
            int mid = s+(e-s)/2;
            if(nums[mid]==target){
                return mid;
            }else if(nums[s]<=nums[mid]){
                if(nums[s]<=target && target<=nums[mid]){
                    e = mid-1;
                }else{
                    s=mid+1;
                }
            }else{
                if(nums[mid]<=target && target<=nums[e]){
                    s=mid+1;
                }else{
                    e=mid-1;
                }
            }
        }
        return -1;
    }
}

3) 81. Find First and Last Position of Element in Sorted Array II - medium 
//similar to part I of the same problem 
//optimal approach 
class Solution {
    public boolean search(int[] nums, int target) {
        int s = 0;
        int e = nums.length-1;
        while(s<=e){
            int mid = s+(e-s)/2;
            if(nums[mid]==target){
                return true;
            }else if(nums[s]==nums[mid] && nums[mid]==nums[e]){
                s = s+1;
                e = e-1;
                continue;
            }else if(nums[s]<=nums[mid]){
                if(nums[s]<=target && target<=nums[mid]){
                    e = mid-1;
                }else{
                    s=mid+1;
                }
            }else{
                if(nums[mid]<=target && target<=nums[e]){
                    s=mid+1;
                }else{
                    e=mid-1;
                }
            }
        }
        return false;
    }
}

4) 153. Find Minimum in Rotated Sorted Array - medium
class Solution {
    public int findMin(int[] arr) {
        int s = 0;
        int e = arr.length-1;
        int min = Integer.MAX_VALUE;
        while(s<=e){
            int mid = s+(e-s)/2;
            //sorted
            if(arr[s]<=arr[mid]){
                min = Math.min(min, arr[s]);
                s = mid+1;
            }else if(arr[mid]<=arr[e]){
                min = Math.min(min, arr[mid]);
                e = mid-1;
            }
            //remove sorted part             
        }
        return min;
    }
} 

//my soln but im a bit confused 
class Solution {
    public static int findPivot(int nums[]){
        int s = 0;
        int e = nums.length-1;
        while(s<=e){
            int mid = s+(e-s)/2;
            if(mid>0 && nums[mid-1]>nums[mid]){
                return mid;
            }else if(nums[s]<=nums[mid] && nums[mid]>nums[e]){
                s=mid+1;
            }else{
                e=mid-1;
            }
        }
        return s; //doesn't matter
    }

    public int findMin(int[] nums) {
        int idx = findPivot(nums);
        return nums[idx];
    }
}

5) coding ninjas - find out how many times the array has been Rotated
public class Solution {
    public static int findPivot(int arr[]){
        int s = 0;
        int e = arr.length-1;
        while(s<=e){
            int mid = s+(e-s)/2;
            if(mid>0 && arr[mid-1]>arr[mid]){
                return mid;
            }else if(arr[s]<=arr[mid] && arr[mid]>arr[e]){
                s=mid+1;
            }else{
                e=mid-1;
            }
        }
        return s;
    }

    public static int findKRotation(int []arr){
        // Write your code here.
        return findPivot(arr);
    }
}

6) 540. Single Element in a Sorted Array - medium
class Solution {
    public int singleNonDuplicate(int[] nums) {
        int l = nums.length;
        if(l==1){
            return nums[0];
        }
        if(nums[0]!=nums[1]){
            return nums[0];
        }
        if(nums[l-1]!=nums[l-2]){
            return nums[l-1];
        }
        int s = 1;
        int e = l-2;
        while(s<=e){
            int mid = s+(e-s)/2;
            if(nums[mid]!=nums[mid+1] && nums[mid]!=nums[mid-1]){
                return nums[mid];
            }else if((mid%2==1 && nums[mid-1]==nums[mid]) ||
            (mid%2==0 && nums[mid]==nums[mid+1])){
                s=mid+1;
            }else{
                e=mid-1;
            }
        }
        return -1;
    }
}

