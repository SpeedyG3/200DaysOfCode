1) K-th Element of Two Sorted Arrays - coding ninjas 
striver a2z coding ninjas
optimal solution 
similar to find median of 2 sorted arrays 
import java.util.ArrayList;
public class Solution {
    public static int kthElement(ArrayList<Integer> nums1, ArrayList<Integer> nums2, int n1, int n2, int k) {
        //optimal striver soln 
        if(n1>n2){
            return kthElement(nums2, nums1, n2, n1, k);
        }
        int n = n1 + n2;
        int reqLeft = k;
        int s = Math.max(0, k-n2);
        int e = Math.min(k, n1);
        while(s<=e){
            int mid1 = s+(e-s)/2;
            int mid2 = reqLeft - mid1;
            int l1 = Integer.MIN_VALUE;
            int l2 = Integer.MIN_VALUE;
            int r1 = Integer.MAX_VALUE;
            int r2 = Integer.MAX_VALUE;
            if(mid1<n1){
                r1 = nums1.get(mid1);
            }
            if(mid2<n2){
                r2 = nums2.get(mid2);
            }
            if(mid1-1>=0){
                l1 = nums1.get(mid1-1);
            }
            if(mid2-1>=0){
                l2 = nums2.get(mid2-1);
            }

            if(l1<=r2 && l2<=r1){
                return Math.max(l1, l2);
            }else if(l1>r2){
                e = mid1 - 1;
            }else{
                s = mid1 + 1;
            }
        }
        return -1;//dummy
    }
}

2) 151. Reverse Words in a String - medium
class Solution {
    public String reverseWords(String s) {
        String ans = "";
        int i = 0;
        int l = s.length();
        while(i<l){
            while(i<l && s.charAt(i)==' '){
                i++;
            }

            String word = "";
            while(i<l && s.charAt(i)!=' '){
                word+=s.charAt(i);
                i++;
            }
            // if(ans=="" && word.length()>0){
            //     ans = word;
            // }
            if(word.length()>0){
                ans = word + " " + ans;
            }
        }
        return ans.trim(); //remove end space 
    }
}

//better soln using stringBuilder class
class Solution {
    public String reverseWords(String s) {
        String str[] = s.split(" ");
        StringBuilder sb = new StringBuilder();
        for(int i=str.length-1;i>=0;i--){
            if(str[i]!=""){
                sb.append(str[i]); //word add
                sb.append(" "); //space add
            }
        }
        sb.setLength(sb.length()-1); //deleting last extra space
        return sb.toString();
    }
}

3) 1903. Largest Odd Number in String - easy 
//odd numbers can check from end and do 
//logical 
class Solution {
    public String largestOddNumber(String num) {
        int l = num.length();
        for(int i=l-1;i>=0;i--){
            int number = num.charAt(i) - '0';
            if(number%2!=0){
                return num.substring(0, i+1);
            }
        }
        return "";
    }
}

4) 14. Longest Common Prefix - easy 
//compare smallest and largest string for common prefix 
class Solution {
    public String longestCommonPrefix(String[] strs) {
        Arrays.sort(strs);
        int l = strs.length;
        String s1 = strs[0];
        String s2 = strs[l-1];
        int idx = 0;
        while(idx<s1.length() && idx<s2.length()){
            if(s1.charAt(idx)==s2.charAt(idx)){
                idx++;
            }else{
                break;
            }
        }
        return s1.substring(0, idx);
    }
}